
stm32f103_sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000780c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08007918  08007918  00017918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007994  08007994  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08007994  08007994  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007994  08007994  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007994  08007994  00017994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800799c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001000  20000184  08007b20  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001184  08007b20  00021184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce3d  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c2a  00000000  00000000  0002cfea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002fc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  00030750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a86a  00000000  00000000  00031100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134e7  00000000  00000000  0004b96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084d6f  00000000  00000000  0005ee51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029ec  00000000  00000000  000e3c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	08007900 	.word	0x08007900

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	08007900 	.word	0x08007900

0800014c <apInit>:




void apInit(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0


}
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <apMain>:

void apMain(void)
{
 8000158:	b580      	push	{r7, lr}
 800015a:	b082      	sub	sp, #8
 800015c:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 800015e:	f000 f88c 	bl	800027a <millis>
 8000162:	6078      	str	r0, [r7, #4]

  while(1)
  {
//    ledOn(_DEF_LED1);

    if(millis() - pre_time >= 500)
 8000164:	f000 f889 	bl	800027a <millis>
 8000168:	4602      	mov	r2, r0
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	1ad3      	subs	r3, r2, r3
 800016e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000172:	d305      	bcc.n	8000180 <apMain+0x28>
    {
      ledToggle(_DEF_LED1);
 8000174:	2000      	movs	r0, #0
 8000176:	f000 f9dd 	bl	8000534 <ledToggle>
//      CDC_Transmit_FS("test\n", 6);
      pre_time = millis();
 800017a:	f000 f87e 	bl	800027a <millis>
 800017e:	6078      	str	r0, [r7, #4]
    }

    if(cdcAvailable() > 0)
 8000180:	f006 fe84 	bl	8006e8c <cdcAvailable>
 8000184:	4603      	mov	r3, r0
 8000186:	2b00      	cmp	r3, #0
 8000188:	d0ec      	beq.n	8000164 <apMain+0xc>
    {
      uint8_t rx_data;
      rx_data = cdcRead();
 800018a:	f006 fe95 	bl	8006eb8 <cdcRead>
 800018e:	4603      	mov	r3, r0
 8000190:	70fb      	strb	r3, [r7, #3]
      cdcWrite((uint8_t *)"RX_Data : ", 10);
 8000192:	210a      	movs	r1, #10
 8000194:	4806      	ldr	r0, [pc, #24]	; (80001b0 <apMain+0x58>)
 8000196:	f006 fed5 	bl	8006f44 <cdcWrite>
      cdcWrite(&rx_data, 1);
 800019a:	1cfb      	adds	r3, r7, #3
 800019c:	2101      	movs	r1, #1
 800019e:	4618      	mov	r0, r3
 80001a0:	f006 fed0 	bl	8006f44 <cdcWrite>
      cdcWrite((uint8_t *)"\n", 2);
 80001a4:	2102      	movs	r1, #2
 80001a6:	4803      	ldr	r0, [pc, #12]	; (80001b4 <apMain+0x5c>)
 80001a8:	f006 fecc 	bl	8006f44 <cdcWrite>
    if(millis() - pre_time >= 500)
 80001ac:	e7da      	b.n	8000164 <apMain+0xc>
 80001ae:	bf00      	nop
 80001b0:	08007918 	.word	0x08007918
 80001b4:	08007924 	.word	0x08007924

080001b8 <bspInit>:

#include "bsp.h"
#include "usb_device.h"

void bspInit(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b086      	sub	sp, #24
 80001bc:	af00      	add	r7, sp, #0
  HAL_Init();
 80001be:	f000 f9dd 	bl	800057c <HAL_Init>
  SystemClock_Config();
 80001c2:	f000 f861 	bl	8000288 <SystemClock_Config>

  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001c6:	4b25      	ldr	r3, [pc, #148]	; (800025c <bspInit+0xa4>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	4a24      	ldr	r2, [pc, #144]	; (800025c <bspInit+0xa4>)
 80001cc:	f043 0320 	orr.w	r3, r3, #32
 80001d0:	6193      	str	r3, [r2, #24]
 80001d2:	4b22      	ldr	r3, [pc, #136]	; (800025c <bspInit+0xa4>)
 80001d4:	699b      	ldr	r3, [r3, #24]
 80001d6:	f003 0320 	and.w	r3, r3, #32
 80001da:	607b      	str	r3, [r7, #4]
 80001dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001de:	4b1f      	ldr	r3, [pc, #124]	; (800025c <bspInit+0xa4>)
 80001e0:	699b      	ldr	r3, [r3, #24]
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <bspInit+0xa4>)
 80001e4:	f043 0304 	orr.w	r3, r3, #4
 80001e8:	6193      	str	r3, [r2, #24]
 80001ea:	4b1c      	ldr	r3, [pc, #112]	; (800025c <bspInit+0xa4>)
 80001ec:	699b      	ldr	r3, [r3, #24]
 80001ee:	f003 0304 	and.w	r3, r3, #4
 80001f2:	603b      	str	r3, [r7, #0]
 80001f4:	683b      	ldr	r3, [r7, #0]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f6:	f107 0308 	add.w	r3, r7, #8
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000208:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800020a:	2311      	movs	r3, #17
 800020c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020e:	2300      	movs	r3, #0
 8000210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000212:	2302      	movs	r3, #2
 8000214:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000216:	f107 0308 	add.w	r3, r7, #8
 800021a:	4619      	mov	r1, r3
 800021c:	4810      	ldr	r0, [pc, #64]	; (8000260 <bspInit+0xa8>)
 800021e:	f000 fb41 	bl	80008a4 <HAL_GPIO_Init>

  //usb cdc reset start
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000228:	480d      	ldr	r0, [pc, #52]	; (8000260 <bspInit+0xa8>)
 800022a:	f000 fcbf 	bl	8000bac <HAL_GPIO_WritePin>
  delay(100);
 800022e:	2064      	movs	r0, #100	; 0x64
 8000230:	f000 f818 	bl	8000264 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <bspInit+0xa8>)
 800023c:	f000 fcb6 	bl	8000bac <HAL_GPIO_WritePin>
  //usb cdc reset end


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000240:	2300      	movs	r3, #0
 8000242:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000244:	f107 0308 	add.w	r3, r7, #8
 8000248:	4619      	mov	r1, r3
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <bspInit+0xa8>)
 800024c:	f000 fb2a 	bl	80008a4 <HAL_GPIO_Init>



  MX_USB_DEVICE_Init();
 8000250:	f006 fdec 	bl	8006e2c <MX_USB_DEVICE_Init>
}
 8000254:	bf00      	nop
 8000256:	3718      	adds	r7, #24
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40021000 	.word	0x40021000
 8000260:	40010800 	.word	0x40010800

08000264 <delay>:

void delay(uint32_t ms)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f000 f9e7 	bl	8000640 <HAL_Delay>
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}

0800027a <millis>:

uint32_t millis(void)
{
 800027a:	b580      	push	{r7, lr}
 800027c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800027e:	f000 f9d5 	bl	800062c <HAL_GetTick>
 8000282:	4603      	mov	r3, r0
}
 8000284:	4618      	mov	r0, r3
 8000286:	bd80      	pop	{r7, pc}

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b094      	sub	sp, #80	; 0x50
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000292:	2228      	movs	r2, #40	; 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f007 fb2a 	bl	80078f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b8:	2301      	movs	r3, #1
 80002ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ca:	2302      	movs	r3, #2
 80002cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fa04 	bl	80026ec <HAL_RCC_OscConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ea:	f000 f827 	bl	800033c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	230f      	movs	r3, #15
 80002f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000304:	f107 0314 	add.w	r3, r7, #20
 8000308:	2102      	movs	r1, #2
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fc70 	bl	8002bf0 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000316:	f000 f811 	bl	800033c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800031a:	2310      	movs	r3, #16
 800031c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f002 fdbf 	bl	8002ea8 <HAL_RCCEx_PeriphCLKConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000330:	f000 f804 	bl	800033c <Error_Handler>
  }
}
 8000334:	bf00      	nop
 8000336:	3750      	adds	r7, #80	; 0x50
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000340:	b672      	cpsid	i
}
 8000342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000344:	e7fe      	b.n	8000344 <Error_Handler+0x8>
	...

08000348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <HAL_MspInit+0x5c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <HAL_MspInit+0x5c>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <HAL_MspInit+0x5c>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <HAL_MspInit+0x5c>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <HAL_MspInit+0x5c>)
 800036c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000370:	61d3      	str	r3, [r2, #28]
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <HAL_MspInit+0x5c>)
 8000374:	69db      	ldr	r3, [r3, #28]
 8000376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800037e:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <HAL_MspInit+0x60>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <HAL_MspInit+0x60>)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010000 	.word	0x40010000

080003ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <NMI_Handler+0x4>

080003b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <HardFault_Handler+0x4>

080003b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <MemManage_Handler+0x4>

080003be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <BusFault_Handler+0x4>

080003c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <UsageFault_Handler+0x4>

080003ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr

080003d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr

080003e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f2:	f000 f909 	bl	8000608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000400:	4802      	ldr	r0, [pc, #8]	; (800040c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000402:	f000 fd29 	bl	8000e58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000c74 	.word	0x20000c74

08000410 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800041c:	f7ff fff8 	bl	8000410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000420:	480b      	ldr	r0, [pc, #44]	; (8000450 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000422:	490c      	ldr	r1, [pc, #48]	; (8000454 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000424:	4a0c      	ldr	r2, [pc, #48]	; (8000458 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000428:	e002      	b.n	8000430 <LoopCopyDataInit>

0800042a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800042c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042e:	3304      	adds	r3, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000434:	d3f9      	bcc.n	800042a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000436:	4a09      	ldr	r2, [pc, #36]	; (800045c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000438:	4c09      	ldr	r4, [pc, #36]	; (8000460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800043c:	e001      	b.n	8000442 <LoopFillZerobss>

0800043e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000440:	3204      	adds	r2, #4

08000442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000444:	d3fb      	bcc.n	800043e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000446:	f007 fa2f 	bl	80078a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044a:	f007 fa21 	bl	8007890 <main>
  bx lr
 800044e:	4770      	bx	lr
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000458:	0800799c 	.word	0x0800799c
  ldr r2, =_sbss
 800045c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000460:	20001184 	.word	0x20001184

08000464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC1_2_IRQHandler>
	...

08000468 <ledInit>:
    {
        {GPIOC, GPIO_PIN_13, GPIO_PIN_RESET, GPIO_PIN_SET}
    };

bool ledInit(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0
  bool ret = true;
 800046e:	2301      	movs	r3, #1
 8000470:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000480:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <ledInit+0x84>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a19      	ldr	r2, [pc, #100]	; (80004ec <ledInit+0x84>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b17      	ldr	r3, [pc, #92]	; (80004ec <ledInit+0x84>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0310 	and.w	r3, r3, #16
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	687b      	ldr	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2302      	movs	r3, #2
 80004a2:	617b      	str	r3, [r7, #20]


  for(int i = 0; i<LED_MAX_CH; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
 80004a8:	e017      	b.n	80004da <ledInit+0x72>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80004aa:	4a11      	ldr	r2, [pc, #68]	; (80004f0 <ledInit+0x88>)
 80004ac:	69fb      	ldr	r3, [r7, #28]
 80004ae:	00db      	lsls	r3, r3, #3
 80004b0:	4413      	add	r3, r2
 80004b2:	889b      	ldrh	r3, [r3, #4]
 80004b4:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <ledInit+0x88>)
 80004b8:	69fb      	ldr	r3, [r7, #28]
 80004ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80004be:	f107 0208 	add.w	r2, r7, #8
 80004c2:	4611      	mov	r1, r2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 f9ed 	bl	80008a4 <HAL_GPIO_Init>

    ledOff(i);
 80004ca:	69fb      	ldr	r3, [r7, #28]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 f810 	bl	80004f4 <ledOff>
  for(int i = 0; i<LED_MAX_CH; i++)
 80004d4:	69fb      	ldr	r3, [r7, #28]
 80004d6:	3301      	adds	r3, #1
 80004d8:	61fb      	str	r3, [r7, #28]
 80004da:	69fb      	ldr	r3, [r7, #28]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	dde4      	ble.n	80004aa <ledInit+0x42>
  }

  return ret;
 80004e0:	7efb      	ldrb	r3, [r7, #27]
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3720      	adds	r7, #32
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000
 80004f0:	20000004 	.word	0x20000004

080004f4 <ledOff>:
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}


void ledOff(uint8_t ch)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
  if(ch >= LED_MAX_CH) return;
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d111      	bne.n	8000528 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <ledOff+0x3c>)
 8000508:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	4a08      	ldr	r2, [pc, #32]	; (8000530 <ledOff+0x3c>)
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	4413      	add	r3, r2
 8000514:	8899      	ldrh	r1, [r3, #4]
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	4a05      	ldr	r2, [pc, #20]	; (8000530 <ledOff+0x3c>)
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	4413      	add	r3, r2
 800051e:	79db      	ldrb	r3, [r3, #7]
 8000520:	461a      	mov	r2, r3
 8000522:	f000 fb43 	bl	8000bac <HAL_GPIO_WritePin>
 8000526:	e000      	b.n	800052a <ledOff+0x36>
  if(ch >= LED_MAX_CH) return;
 8000528:	bf00      	nop
}
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000004 	.word	0x20000004

08000534 <ledToggle>:


void ledToggle(uint8_t ch)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
  if(ch >= LED_MAX_CH) return;
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d10d      	bne.n	8000560 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	4a08      	ldr	r2, [pc, #32]	; (8000568 <ledToggle+0x34>)
 8000548:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	4906      	ldr	r1, [pc, #24]	; (8000568 <ledToggle+0x34>)
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	440b      	add	r3, r1
 8000554:	889b      	ldrh	r3, [r3, #4]
 8000556:	4619      	mov	r1, r3
 8000558:	4610      	mov	r0, r2
 800055a:	f000 fb3f 	bl	8000bdc <HAL_GPIO_TogglePin>
 800055e:	e000      	b.n	8000562 <ledToggle+0x2e>
  if(ch >= LED_MAX_CH) return;
 8000560:	bf00      	nop
}
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000004 	.word	0x20000004

0800056c <hwInit>:


#include "hw.h"

void hwInit(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  bspInit();
 8000570:	f7ff fe22 	bl	80001b8 <bspInit>
  ledInit();
 8000574:	f7ff ff78 	bl	8000468 <ledInit>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_Init+0x28>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <HAL_Init+0x28>)
 8000586:	f043 0310 	orr.w	r3, r3, #16
 800058a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058c:	2003      	movs	r0, #3
 800058e:	f000 f947 	bl	8000820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000592:	200f      	movs	r0, #15
 8000594:	f000 f808 	bl	80005a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000598:	f7ff fed6 	bl	8000348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40022000 	.word	0x40022000

080005a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_InitTick+0x54>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <HAL_InitTick+0x58>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f95f 	bl	800088a <HAL_SYSTICK_Config>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e00e      	b.n	80005f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b0f      	cmp	r3, #15
 80005da:	d80a      	bhi.n	80005f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005dc:	2200      	movs	r2, #0
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295
 80005e4:	f000 f927 	bl	8000836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <HAL_InitTick+0x5c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ee:	2300      	movs	r3, #0
 80005f0:	e000      	b.n	80005f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000000 	.word	0x20000000
 8000600:	20000010 	.word	0x20000010
 8000604:	2000000c 	.word	0x2000000c

08000608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_IncTick+0x1c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <HAL_IncTick+0x20>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4413      	add	r3, r2
 8000618:	4a03      	ldr	r2, [pc, #12]	; (8000628 <HAL_IncTick+0x20>)
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	20000010 	.word	0x20000010
 8000628:	200001a0 	.word	0x200001a0

0800062c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;
 8000630:	4b02      	ldr	r3, [pc, #8]	; (800063c <HAL_GetTick+0x10>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	200001a0 	.word	0x200001a0

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000648:	f7ff fff0 	bl	800062c <HAL_GetTick>
 800064c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000658:	d005      	beq.n	8000666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <HAL_Delay+0x44>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000666:	bf00      	nop
 8000668:	f7ff ffe0 	bl	800062c <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	429a      	cmp	r2, r3
 8000676:	d8f7      	bhi.n	8000668 <HAL_Delay+0x28>
  {
  }
}
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000010 	.word	0x20000010

08000688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a4:	4013      	ands	r3, r2
 80006a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ba:	4a04      	ldr	r2, [pc, #16]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	60d3      	str	r3, [r2, #12]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <__NVIC_GetPriorityGrouping+0x18>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	f003 0307 	and.w	r3, r3, #7
}
 80006de:	4618      	mov	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db0b      	blt.n	8000716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f003 021f 	and.w	r2, r3, #31
 8000704:	4906      	ldr	r1, [pc, #24]	; (8000720 <__NVIC_EnableIRQ+0x34>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	095b      	lsrs	r3, r3, #5
 800070c:	2001      	movs	r0, #1
 800070e:	fa00 f202 	lsl.w	r2, r0, r2
 8000712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	e000e100 	.word	0xe000e100

08000724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	db0a      	blt.n	800074e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	490c      	ldr	r1, [pc, #48]	; (8000770 <__NVIC_SetPriority+0x4c>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	0112      	lsls	r2, r2, #4
 8000744:	b2d2      	uxtb	r2, r2
 8000746:	440b      	add	r3, r1
 8000748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800074c:	e00a      	b.n	8000764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4908      	ldr	r1, [pc, #32]	; (8000774 <__NVIC_SetPriority+0x50>)
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	f003 030f 	and.w	r3, r3, #15
 800075a:	3b04      	subs	r3, #4
 800075c:	0112      	lsls	r2, r2, #4
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	440b      	add	r3, r1
 8000762:	761a      	strb	r2, [r3, #24]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000e100 	.word	0xe000e100
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000778:	b480      	push	{r7}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f1c3 0307 	rsb	r3, r3, #7
 8000792:	2b04      	cmp	r3, #4
 8000794:	bf28      	it	cs
 8000796:	2304      	movcs	r3, #4
 8000798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3304      	adds	r3, #4
 800079e:	2b06      	cmp	r3, #6
 80007a0:	d902      	bls.n	80007a8 <NVIC_EncodePriority+0x30>
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3b03      	subs	r3, #3
 80007a6:	e000      	b.n	80007aa <NVIC_EncodePriority+0x32>
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	f04f 32ff 	mov.w	r2, #4294967295
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43da      	mvns	r2, r3
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	401a      	ands	r2, r3
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c0:	f04f 31ff 	mov.w	r1, #4294967295
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	43d9      	mvns	r1, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	4313      	orrs	r3, r2
         );
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3724      	adds	r7, #36	; 0x24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007ec:	d301      	bcc.n	80007f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ee:	2301      	movs	r3, #1
 80007f0:	e00f      	b.n	8000812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <SysTick_Config+0x40>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007fa:	210f      	movs	r1, #15
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000800:	f7ff ff90 	bl	8000724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <SysTick_Config+0x40>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <SysTick_Config+0x40>)
 800080c:	2207      	movs	r2, #7
 800080e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	e000e010 	.word	0xe000e010

08000820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ff2d 	bl	8000688 <__NVIC_SetPriorityGrouping>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000848:	f7ff ff42 	bl	80006d0 <__NVIC_GetPriorityGrouping>
 800084c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	68b9      	ldr	r1, [r7, #8]
 8000852:	6978      	ldr	r0, [r7, #20]
 8000854:	f7ff ff90 	bl	8000778 <NVIC_EncodePriority>
 8000858:	4602      	mov	r2, r0
 800085a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff5f 	bl	8000724 <__NVIC_SetPriority>
}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff35 	bl	80006ec <__NVIC_EnableIRQ>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ffa2 	bl	80007dc <SysTick_Config>
 8000898:	4603      	mov	r3, r0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b08b      	sub	sp, #44	; 0x2c
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008b6:	e169      	b.n	8000b8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008b8:	2201      	movs	r2, #1
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	69fa      	ldr	r2, [r7, #28]
 80008c8:	4013      	ands	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	f040 8158 	bne.w	8000b86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	4a9a      	ldr	r2, [pc, #616]	; (8000b44 <HAL_GPIO_Init+0x2a0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d05e      	beq.n	800099e <HAL_GPIO_Init+0xfa>
 80008e0:	4a98      	ldr	r2, [pc, #608]	; (8000b44 <HAL_GPIO_Init+0x2a0>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d875      	bhi.n	80009d2 <HAL_GPIO_Init+0x12e>
 80008e6:	4a98      	ldr	r2, [pc, #608]	; (8000b48 <HAL_GPIO_Init+0x2a4>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d058      	beq.n	800099e <HAL_GPIO_Init+0xfa>
 80008ec:	4a96      	ldr	r2, [pc, #600]	; (8000b48 <HAL_GPIO_Init+0x2a4>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d86f      	bhi.n	80009d2 <HAL_GPIO_Init+0x12e>
 80008f2:	4a96      	ldr	r2, [pc, #600]	; (8000b4c <HAL_GPIO_Init+0x2a8>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d052      	beq.n	800099e <HAL_GPIO_Init+0xfa>
 80008f8:	4a94      	ldr	r2, [pc, #592]	; (8000b4c <HAL_GPIO_Init+0x2a8>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d869      	bhi.n	80009d2 <HAL_GPIO_Init+0x12e>
 80008fe:	4a94      	ldr	r2, [pc, #592]	; (8000b50 <HAL_GPIO_Init+0x2ac>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d04c      	beq.n	800099e <HAL_GPIO_Init+0xfa>
 8000904:	4a92      	ldr	r2, [pc, #584]	; (8000b50 <HAL_GPIO_Init+0x2ac>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d863      	bhi.n	80009d2 <HAL_GPIO_Init+0x12e>
 800090a:	4a92      	ldr	r2, [pc, #584]	; (8000b54 <HAL_GPIO_Init+0x2b0>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d046      	beq.n	800099e <HAL_GPIO_Init+0xfa>
 8000910:	4a90      	ldr	r2, [pc, #576]	; (8000b54 <HAL_GPIO_Init+0x2b0>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d85d      	bhi.n	80009d2 <HAL_GPIO_Init+0x12e>
 8000916:	2b12      	cmp	r3, #18
 8000918:	d82a      	bhi.n	8000970 <HAL_GPIO_Init+0xcc>
 800091a:	2b12      	cmp	r3, #18
 800091c:	d859      	bhi.n	80009d2 <HAL_GPIO_Init+0x12e>
 800091e:	a201      	add	r2, pc, #4	; (adr r2, 8000924 <HAL_GPIO_Init+0x80>)
 8000920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000924:	0800099f 	.word	0x0800099f
 8000928:	08000979 	.word	0x08000979
 800092c:	0800098b 	.word	0x0800098b
 8000930:	080009cd 	.word	0x080009cd
 8000934:	080009d3 	.word	0x080009d3
 8000938:	080009d3 	.word	0x080009d3
 800093c:	080009d3 	.word	0x080009d3
 8000940:	080009d3 	.word	0x080009d3
 8000944:	080009d3 	.word	0x080009d3
 8000948:	080009d3 	.word	0x080009d3
 800094c:	080009d3 	.word	0x080009d3
 8000950:	080009d3 	.word	0x080009d3
 8000954:	080009d3 	.word	0x080009d3
 8000958:	080009d3 	.word	0x080009d3
 800095c:	080009d3 	.word	0x080009d3
 8000960:	080009d3 	.word	0x080009d3
 8000964:	080009d3 	.word	0x080009d3
 8000968:	08000981 	.word	0x08000981
 800096c:	08000995 	.word	0x08000995
 8000970:	4a79      	ldr	r2, [pc, #484]	; (8000b58 <HAL_GPIO_Init+0x2b4>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d013      	beq.n	800099e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000976:	e02c      	b.n	80009d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	623b      	str	r3, [r7, #32]
          break;
 800097e:	e029      	b.n	80009d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	3304      	adds	r3, #4
 8000986:	623b      	str	r3, [r7, #32]
          break;
 8000988:	e024      	b.n	80009d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	3308      	adds	r3, #8
 8000990:	623b      	str	r3, [r7, #32]
          break;
 8000992:	e01f      	b.n	80009d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	330c      	adds	r3, #12
 800099a:	623b      	str	r3, [r7, #32]
          break;
 800099c:	e01a      	b.n	80009d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d102      	bne.n	80009ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009a6:	2304      	movs	r3, #4
 80009a8:	623b      	str	r3, [r7, #32]
          break;
 80009aa:	e013      	b.n	80009d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d105      	bne.n	80009c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b4:	2308      	movs	r3, #8
 80009b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	69fa      	ldr	r2, [r7, #28]
 80009bc:	611a      	str	r2, [r3, #16]
          break;
 80009be:	e009      	b.n	80009d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c0:	2308      	movs	r3, #8
 80009c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	69fa      	ldr	r2, [r7, #28]
 80009c8:	615a      	str	r2, [r3, #20]
          break;
 80009ca:	e003      	b.n	80009d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
          break;
 80009d0:	e000      	b.n	80009d4 <HAL_GPIO_Init+0x130>
          break;
 80009d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	2bff      	cmp	r3, #255	; 0xff
 80009d8:	d801      	bhi.n	80009de <HAL_GPIO_Init+0x13a>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	e001      	b.n	80009e2 <HAL_GPIO_Init+0x13e>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3304      	adds	r3, #4
 80009e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	2bff      	cmp	r3, #255	; 0xff
 80009e8:	d802      	bhi.n	80009f0 <HAL_GPIO_Init+0x14c>
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	e002      	b.n	80009f6 <HAL_GPIO_Init+0x152>
 80009f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f2:	3b08      	subs	r3, #8
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	210f      	movs	r1, #15
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	fa01 f303 	lsl.w	r3, r1, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	401a      	ands	r2, r3
 8000a08:	6a39      	ldr	r1, [r7, #32]
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	431a      	orrs	r2, r3
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 80b1 	beq.w	8000b86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a24:	4b4d      	ldr	r3, [pc, #308]	; (8000b5c <HAL_GPIO_Init+0x2b8>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a4c      	ldr	r2, [pc, #304]	; (8000b5c <HAL_GPIO_Init+0x2b8>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b4a      	ldr	r3, [pc, #296]	; (8000b5c <HAL_GPIO_Init+0x2b8>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a3c:	4a48      	ldr	r2, [pc, #288]	; (8000b60 <HAL_GPIO_Init+0x2bc>)
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	3302      	adds	r3, #2
 8000a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	220f      	movs	r2, #15
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a40      	ldr	r2, [pc, #256]	; (8000b64 <HAL_GPIO_Init+0x2c0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d013      	beq.n	8000a90 <HAL_GPIO_Init+0x1ec>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a3f      	ldr	r2, [pc, #252]	; (8000b68 <HAL_GPIO_Init+0x2c4>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d00d      	beq.n	8000a8c <HAL_GPIO_Init+0x1e8>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a3e      	ldr	r2, [pc, #248]	; (8000b6c <HAL_GPIO_Init+0x2c8>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d007      	beq.n	8000a88 <HAL_GPIO_Init+0x1e4>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a3d      	ldr	r2, [pc, #244]	; (8000b70 <HAL_GPIO_Init+0x2cc>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d101      	bne.n	8000a84 <HAL_GPIO_Init+0x1e0>
 8000a80:	2303      	movs	r3, #3
 8000a82:	e006      	b.n	8000a92 <HAL_GPIO_Init+0x1ee>
 8000a84:	2304      	movs	r3, #4
 8000a86:	e004      	b.n	8000a92 <HAL_GPIO_Init+0x1ee>
 8000a88:	2302      	movs	r3, #2
 8000a8a:	e002      	b.n	8000a92 <HAL_GPIO_Init+0x1ee>
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e000      	b.n	8000a92 <HAL_GPIO_Init+0x1ee>
 8000a90:	2300      	movs	r3, #0
 8000a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a94:	f002 0203 	and.w	r2, r2, #3
 8000a98:	0092      	lsls	r2, r2, #2
 8000a9a:	4093      	lsls	r3, r2
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aa2:	492f      	ldr	r1, [pc, #188]	; (8000b60 <HAL_GPIO_Init+0x2bc>)
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000abe:	689a      	ldr	r2, [r3, #8]
 8000ac0:	492c      	ldr	r1, [pc, #176]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	608b      	str	r3, [r1, #8]
 8000ac8:	e006      	b.n	8000ad8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	4928      	ldr	r1, [pc, #160]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d006      	beq.n	8000af2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	4922      	ldr	r1, [pc, #136]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	60cb      	str	r3, [r1, #12]
 8000af0:	e006      	b.n	8000b00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000af4:	68da      	ldr	r2, [r3, #12]
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	491e      	ldr	r1, [pc, #120]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000afc:	4013      	ands	r3, r2
 8000afe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d006      	beq.n	8000b1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	4918      	ldr	r1, [pc, #96]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	604b      	str	r3, [r1, #4]
 8000b18:	e006      	b.n	8000b28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	4914      	ldr	r1, [pc, #80]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000b24:	4013      	ands	r3, r2
 8000b26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d021      	beq.n	8000b78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	490e      	ldr	r1, [pc, #56]	; (8000b74 <HAL_GPIO_Init+0x2d0>)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	600b      	str	r3, [r1, #0]
 8000b40:	e021      	b.n	8000b86 <HAL_GPIO_Init+0x2e2>
 8000b42:	bf00      	nop
 8000b44:	10320000 	.word	0x10320000
 8000b48:	10310000 	.word	0x10310000
 8000b4c:	10220000 	.word	0x10220000
 8000b50:	10210000 	.word	0x10210000
 8000b54:	10120000 	.word	0x10120000
 8000b58:	10110000 	.word	0x10110000
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010000 	.word	0x40010000
 8000b64:	40010800 	.word	0x40010800
 8000b68:	40010c00 	.word	0x40010c00
 8000b6c:	40011000 	.word	0x40011000
 8000b70:	40011400 	.word	0x40011400
 8000b74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_GPIO_Init+0x304>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	4909      	ldr	r1, [pc, #36]	; (8000ba8 <HAL_GPIO_Init+0x304>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	3301      	adds	r3, #1
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	fa22 f303 	lsr.w	r3, r2, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f47f ae8e 	bne.w	80008b8 <HAL_GPIO_Init+0x14>
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	372c      	adds	r7, #44	; 0x2c
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	40010400 	.word	0x40010400

08000bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	807b      	strh	r3, [r7, #2]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bbc:	787b      	ldrb	r3, [r7, #1]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bc2:	887a      	ldrh	r2, [r7, #2]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bc8:	e003      	b.n	8000bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bca:	887b      	ldrh	r3, [r7, #2]
 8000bcc:	041a      	lsls	r2, r3, #16
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	611a      	str	r2, [r3, #16]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bee:	887a      	ldrh	r2, [r7, #2]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	041a      	lsls	r2, r3, #16
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	43d9      	mvns	r1, r3
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	400b      	ands	r3, r1
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	611a      	str	r2, [r3, #16]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr

08000c0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c10:	b08b      	sub	sp, #44	; 0x2c
 8000c12:	af06      	add	r7, sp, #24
 8000c14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e0f1      	b.n	8000e04 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d106      	bne.n	8000c3a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f006 fb81 	bl	800733c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fa0a 	bl	8003060 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	687e      	ldr	r6, [r7, #4]
 8000c54:	466d      	mov	r5, sp
 8000c56:	f106 0410 	add.w	r4, r6, #16
 8000c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	602b      	str	r3, [r5, #0]
 8000c62:	1d33      	adds	r3, r6, #4
 8000c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c66:	6838      	ldr	r0, [r7, #0]
 8000c68:	f002 f9d4 	bl	8003014 <USB_CoreInit>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2202      	movs	r2, #2
 8000c76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e0c2      	b.n	8000e04 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 fa05 	bl	8003094 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]
 8000c8e:	e040      	b.n	8000d12 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	440b      	add	r3, r1
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	440b      	add	r3, r1
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	440b      	add	r3, r1
 8000cca:	3303      	adds	r3, #3
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cd0:	7bfa      	ldrb	r2, [r7, #15]
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	440b      	add	r3, r1
 8000cde:	3338      	adds	r3, #56	; 0x38
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ce4:	7bfa      	ldrb	r2, [r7, #15]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	333c      	adds	r3, #60	; 0x3c
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cf8:	7bfa      	ldrb	r2, [r7, #15]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	3340      	adds	r3, #64	; 0x40
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	7bfa      	ldrb	r2, [r7, #15]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d3b9      	bcc.n	8000c90 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	e044      	b.n	8000dac <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d22:	7bfa      	ldrb	r2, [r7, #15]
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	440b      	add	r3, r1
 8000d30:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d38:	7bfa      	ldrb	r2, [r7, #15]
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	440b      	add	r3, r1
 8000d46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d4a:	7bfa      	ldrb	r2, [r7, #15]
 8000d4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d4e:	7bfa      	ldrb	r2, [r7, #15]
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d64:	7bfa      	ldrb	r2, [r7, #15]
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	440b      	add	r3, r1
 8000d72:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d7a:	7bfa      	ldrb	r2, [r7, #15]
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	440b      	add	r3, r1
 8000d88:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	440b      	add	r3, r1
 8000d9e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	3301      	adds	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	7bfa      	ldrb	r2, [r7, #15]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d3b5      	bcc.n	8000d22 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	687e      	ldr	r6, [r7, #4]
 8000dbe:	466d      	mov	r5, sp
 8000dc0:	f106 0410 	add.w	r4, r6, #16
 8000dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	602b      	str	r3, [r5, #0]
 8000dcc:	1d33      	adds	r3, r6, #4
 8000dce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dd0:	6838      	ldr	r0, [r7, #0]
 8000dd2:	f002 f96b 	bl	80030ac <USB_DevInit>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d005      	beq.n	8000de8 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2202      	movs	r2, #2
 8000de0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e00d      	b.n	8000e04 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2201      	movs	r2, #1
 8000df4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 fbec 	bl	80055da <USB_DevDisconnect>

  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d101      	bne.n	8000e22 <HAL_PCD_Start+0x16>
 8000e1e:	2302      	movs	r3, #2
 8000e20:	e016      	b.n	8000e50 <HAL_PCD_Start+0x44>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 f900 	bl	8003034 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e34:	2101      	movs	r1, #1
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f006 fcf3 	bl	8007822 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f004 fbc0 	bl	80055c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f004 fbc2 	bl	80055ee <USB_ReadInterrupts>
 8000e6a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 fb1b 	bl	80014b2 <PCD_EP_ISR_Handler>

    return;
 8000e7c:	e119      	b.n	80010b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d013      	beq.n	8000eb0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e9a:	b292      	uxth	r2, r2
 8000e9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f006 fac6 	bl	8007432 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f905 	bl	80010b8 <HAL_PCD_SetAddress>

    return;
 8000eae:	e100      	b.n	80010b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00c      	beq.n	8000ed4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ecc:	b292      	uxth	r2, r2
 8000ece:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000ed2:	e0ee      	b.n	80010b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00c      	beq.n	8000ef8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ef0:	b292      	uxth	r2, r2
 8000ef2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000ef6:	e0dc      	b.n	80010b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d027      	beq.n	8000f52 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0204 	bic.w	r2, r2, #4
 8000f14:	b292      	uxth	r2, r2
 8000f16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0208 	bic.w	r2, r2, #8
 8000f2c:	b292      	uxth	r2, r2
 8000f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f006 fab6 	bl	80074a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f4a:	b292      	uxth	r2, r2
 8000f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000f50:	e0af      	b.n	80010b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 8083 	beq.w	8001064 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	77fb      	strb	r3, [r7, #31]
 8000f62:	e010      	b.n	8000f86 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	7ffb      	ldrb	r3, [r7, #31]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	441a      	add	r2, r3
 8000f70:	7ffb      	ldrb	r3, [r7, #31]
 8000f72:	8812      	ldrh	r2, [r2, #0]
 8000f74:	b292      	uxth	r2, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	3320      	adds	r3, #32
 8000f7a:	443b      	add	r3, r7
 8000f7c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000f80:	7ffb      	ldrb	r3, [r7, #31]
 8000f82:	3301      	adds	r3, #1
 8000f84:	77fb      	strb	r3, [r7, #31]
 8000f86:	7ffb      	ldrb	r3, [r7, #31]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	d9eb      	bls.n	8000f64 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0201 	orr.w	r2, r2, #1
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0201 	bic.w	r2, r2, #1
 8000fb6:	b292      	uxth	r2, r2
 8000fb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000fbc:	bf00      	nop
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f6      	beq.n	8000fbe <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fe2:	b292      	uxth	r2, r2
 8000fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	77fb      	strb	r3, [r7, #31]
 8000fec:	e00f      	b.n	800100e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000fee:	7ffb      	ldrb	r3, [r7, #31]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	7ffa      	ldrb	r2, [r7, #31]
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	440a      	add	r2, r1
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	3320      	adds	r3, #32
 8001000:	443b      	add	r3, r7
 8001002:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001006:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001008:	7ffb      	ldrb	r3, [r7, #31]
 800100a:	3301      	adds	r3, #1
 800100c:	77fb      	strb	r3, [r7, #31]
 800100e:	7ffb      	ldrb	r3, [r7, #31]
 8001010:	2b07      	cmp	r3, #7
 8001012:	d9ec      	bls.n	8000fee <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800101c:	b29a      	uxth	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0208 	orr.w	r2, r2, #8
 8001026:	b292      	uxth	r2, r2
 8001028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001034:	b29a      	uxth	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800103e:	b292      	uxth	r2, r2
 8001040:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800104c:	b29a      	uxth	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0204 	orr.w	r2, r2, #4
 8001056:	b292      	uxth	r2, r2
 8001058:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f006 fa07 	bl	8007470 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001062:	e026      	b.n	80010b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00f      	beq.n	800108e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001076:	b29a      	uxth	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001080:	b292      	uxth	r2, r2
 8001082:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f006 f9c5 	bl	8007416 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800108c:	e011      	b.n	80010b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00c      	beq.n	80010b2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010aa:	b292      	uxth	r2, r2
 80010ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80010b0:	bf00      	nop
  }
}
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_PCD_SetAddress+0x1a>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e013      	b.n	80010fa <HAL_PCD_SetAddress+0x42>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	78fa      	ldrb	r2, [r7, #3]
 80010de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	78fa      	ldrb	r2, [r7, #3]
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 fa58 	bl	80055a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	4608      	mov	r0, r1
 800110c:	4611      	mov	r1, r2
 800110e:	461a      	mov	r2, r3
 8001110:	4603      	mov	r3, r0
 8001112:	70fb      	strb	r3, [r7, #3]
 8001114:	460b      	mov	r3, r1
 8001116:	803b      	strh	r3, [r7, #0]
 8001118:	4613      	mov	r3, r2
 800111a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001124:	2b00      	cmp	r3, #0
 8001126:	da0e      	bge.n	8001146 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2201      	movs	r2, #1
 8001142:	705a      	strb	r2, [r3, #1]
 8001144:	e00e      	b.n	8001164 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	f003 0207 	and.w	r2, r3, #7
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2200      	movs	r2, #0
 8001162:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	b2da      	uxtb	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001170:	883a      	ldrh	r2, [r7, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	78ba      	ldrb	r2, [r7, #2]
 800117a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800117c:	78bb      	ldrb	r3, [r7, #2]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d102      	bne.n	8001188 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <HAL_PCD_EP_Open+0x94>
 8001192:	2302      	movs	r3, #2
 8001194:	e00e      	b.n	80011b4 <HAL_PCD_EP_Open+0xb2>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68f9      	ldr	r1, [r7, #12]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 ffa1 	bl	80030ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80011b2:	7afb      	ldrb	r3, [r7, #11]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	da0e      	bge.n	80011ee <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2201      	movs	r2, #1
 80011ea:	705a      	strb	r2, [r3, #1]
 80011ec:	e00e      	b.n	800120c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	f003 0207 	and.w	r2, r3, #7
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	b2da      	uxtb	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800121e:	2b01      	cmp	r3, #1
 8001220:	d101      	bne.n	8001226 <HAL_PCD_EP_Close+0x6a>
 8001222:	2302      	movs	r3, #2
 8001224:	e00e      	b.n	8001244 <HAL_PCD_EP_Close+0x88>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68f9      	ldr	r1, [r7, #12]
 8001234:	4618      	mov	r0, r3
 8001236:	f002 fb19 	bl	800386c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	460b      	mov	r3, r1
 800125a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	f003 0207 	and.w	r2, r3, #7
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4413      	add	r3, r2
 8001272:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	2200      	movs	r2, #0
 800128a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	b2da      	uxtb	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6979      	ldr	r1, [r7, #20]
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fcd0 	bl	8003c44 <USB_EPStartXfer>

  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	460b      	mov	r3, r1
 80012b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80012ba:	78fb      	ldrb	r3, [r7, #3]
 80012bc:	f003 0207 	and.w	r2, r3, #7
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	440b      	add	r3, r1
 80012cc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80012d0:	681b      	ldr	r3, [r3, #0]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	460b      	mov	r3, r1
 80012ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2201      	movs	r2, #1
 8001326:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001328:	7afb      	ldrb	r3, [r7, #11]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	b2da      	uxtb	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6979      	ldr	r1, [r7, #20]
 800133a:	4618      	mov	r0, r3
 800133c:	f002 fc82 	bl	8003c44 <USB_EPStartXfer>

  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	f003 0207 	and.w	r2, r3, #7
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	d901      	bls.n	8001368 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e04c      	b.n	8001402 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800136c:	2b00      	cmp	r3, #0
 800136e:	da0e      	bge.n	800138e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2201      	movs	r2, #1
 800138a:	705a      	strb	r2, [r3, #1]
 800138c:	e00c      	b.n	80013a8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800138e:	78fa      	ldrb	r2, [r7, #3]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2201      	movs	r2, #1
 80013ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <HAL_PCD_EP_SetStall+0x7e>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e01c      	b.n	8001402 <HAL_PCD_EP_SetStall+0xb8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68f9      	ldr	r1, [r7, #12]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 ffe5 	bl	80053a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d108      	bne.n	80013f8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80013f0:	4619      	mov	r1, r3
 80013f2:	4610      	mov	r0, r2
 80013f4:	f004 f90a 	bl	800560c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	460b      	mov	r3, r1
 8001414:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	f003 020f 	and.w	r2, r3, #15
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	d901      	bls.n	8001428 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e040      	b.n	80014aa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800142c:	2b00      	cmp	r3, #0
 800142e:	da0e      	bge.n	800144e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2201      	movs	r2, #1
 800144a:	705a      	strb	r2, [r3, #1]
 800144c:	e00e      	b.n	800146c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	f003 0207 	and.w	r2, r3, #7
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	b2da      	uxtb	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_PCD_EP_ClrStall+0x82>
 8001488:	2302      	movs	r3, #2
 800148a:	e00e      	b.n	80014aa <HAL_PCD_EP_ClrStall+0xa0>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68f9      	ldr	r1, [r7, #12]
 800149a:	4618      	mov	r0, r3
 800149c:	f003 ffd3 	bl	8005446 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b096      	sub	sp, #88	; 0x58
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80014ba:	e3bf      	b.n	8001c3c <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80014c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80014d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 8179 	bne.w	80017d2 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80014e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d152      	bne.n	8001592 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80014f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014fc:	81fb      	strh	r3, [r7, #14]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	89fb      	ldrh	r3, [r7, #14]
 8001504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800150c:	b29b      	uxth	r3, r3
 800150e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3328      	adds	r3, #40	; 0x28
 8001514:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800151e:	b29b      	uxth	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4413      	add	r3, r2
 800152a:	3302      	adds	r3, #2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	4413      	add	r3, r2
 8001534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800153e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001540:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	441a      	add	r2, r3
 800154c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800154e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001550:	2100      	movs	r1, #0
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f005 ff45 	bl	80073e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 836b 	beq.w	8001c3c <PCD_EP_ISR_Handler+0x78a>
 8001566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 8366 	bne.w	8001c3c <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800157c:	b2da      	uxtb	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b292      	uxth	r2, r2
 8001584:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001590:	e354      	b.n	8001c3c <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001598:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80015a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d034      	beq.n	800161a <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	3306      	adds	r3, #6
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015da:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80015e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015e8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80015ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	f004 f85c 	bl	80056ac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001600:	4013      	ands	r3, r2
 8001602:	823b      	strh	r3, [r7, #16]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	8a3a      	ldrh	r2, [r7, #16]
 800160a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800160e:	b292      	uxth	r2, r2
 8001610:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f005 feb8 	bl	8007388 <HAL_PCD_SetupStageCallback>
 8001618:	e310      	b.n	8001c3c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800161a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800161e:	2b00      	cmp	r3, #0
 8001620:	f280 830c 	bge.w	8001c3c <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	b29a      	uxth	r2, r3
 800162c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001630:	4013      	ands	r3, r2
 8001632:	83fb      	strh	r3, [r7, #30]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	8bfa      	ldrh	r2, [r7, #30]
 800163a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800163e:	b292      	uxth	r2, r2
 8001640:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800164a:	b29b      	uxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	3306      	adds	r3, #6
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	4413      	add	r3, r2
 8001660:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800166a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800166c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800166e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d019      	beq.n	80016aa <PCD_EP_ISR_Handler+0x1f8>
 8001676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d015      	beq.n	80016aa <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001684:	6959      	ldr	r1, [r3, #20]
 8001686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001688:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800168a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800168c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800168e:	b29b      	uxth	r3, r3
 8001690:	f004 f80c 	bl	80056ac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	441a      	add	r2, r3
 800169e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80016a2:	2100      	movs	r1, #0
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f005 fe81 	bl	80073ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80016b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f040 82bd 	bne.w	8001c3c <PCD_EP_ISR_Handler+0x78a>
 80016c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80016ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80016ce:	f000 82b5 	beq.w	8001c3c <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	4413      	add	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	801a      	strh	r2, [r3, #0]
 8001702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b3e      	cmp	r3, #62	; 0x3e
 8001708:	d91d      	bls.n	8001746 <PCD_EP_ISR_Handler+0x294>
 800170a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	647b      	str	r3, [r7, #68]	; 0x44
 8001712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <PCD_EP_ISR_Handler+0x272>
 800171e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001720:	3b01      	subs	r3, #1
 8001722:	647b      	str	r3, [r7, #68]	; 0x44
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b29a      	uxth	r2, r3
 800172a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800172c:	b29b      	uxth	r3, r3
 800172e:	029b      	lsls	r3, r3, #10
 8001730:	b29b      	uxth	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b29b      	uxth	r3, r3
 8001736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800173a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800173e:	b29a      	uxth	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	801a      	strh	r2, [r3, #0]
 8001744:	e026      	b.n	8001794 <PCD_EP_ISR_Handler+0x2e2>
 8001746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10a      	bne.n	8001764 <PCD_EP_ISR_Handler+0x2b2>
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800175c:	b29a      	uxth	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	801a      	strh	r2, [r3, #0]
 8001762:	e017      	b.n	8001794 <PCD_EP_ISR_Handler+0x2e2>
 8001764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	647b      	str	r3, [r7, #68]	; 0x44
 800176c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <PCD_EP_ISR_Handler+0x2cc>
 8001778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800177a:	3301      	adds	r3, #1
 800177c:	647b      	str	r3, [r7, #68]	; 0x44
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	b29a      	uxth	r2, r3
 8001784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001786:	b29b      	uxth	r3, r3
 8001788:	029b      	lsls	r3, r3, #10
 800178a:	b29b      	uxth	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b29a      	uxth	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	b29b      	uxth	r3, r3
 800179c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a4:	827b      	strh	r3, [r7, #18]
 80017a6:	8a7b      	ldrh	r3, [r7, #18]
 80017a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80017ac:	827b      	strh	r3, [r7, #18]
 80017ae:	8a7b      	ldrh	r3, [r7, #18]
 80017b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017b4:	827b      	strh	r3, [r7, #18]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	8a7b      	ldrh	r3, [r7, #18]
 80017bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	8013      	strh	r3, [r2, #0]
 80017d0:	e234      	b.n	8001c3c <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017e6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f280 80fc 	bge.w	80019e8 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b29a      	uxth	r2, r3
 8001802:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001806:	4013      	ands	r3, r2
 8001808:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800181e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001822:	b292      	uxth	r2, r2
 8001824:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001826:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800183c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183e:	7b1b      	ldrb	r3, [r3, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d125      	bne.n	8001890 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800184c:	b29b      	uxth	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	3306      	adds	r3, #6
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800186c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001870:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8092 	beq.w	800199e <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001880:	6959      	ldr	r1, [r3, #20]
 8001882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001884:	88da      	ldrh	r2, [r3, #6]
 8001886:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800188a:	f003 ff0f 	bl	80056ac <USB_ReadPMA>
 800188e:	e086      	b.n	800199e <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001892:	78db      	ldrb	r3, [r3, #3]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d10a      	bne.n	80018ae <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001898:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800189c:	461a      	mov	r2, r3
 800189e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f9d9 	bl	8001c58 <HAL_PCD_EP_DB_Receive>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80018ac:	e077      	b.n	800199e <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	441a      	add	r2, r3
 80018da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80018de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d024      	beq.n	8001956 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001914:	b29b      	uxth	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	3302      	adds	r3, #2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	4413      	add	r3, r2
 800192a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001934:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001938:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800193c:	2b00      	cmp	r3, #0
 800193e:	d02e      	beq.n	800199e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001946:	6959      	ldr	r1, [r3, #20]
 8001948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194a:	891a      	ldrh	r2, [r3, #8]
 800194c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001950:	f003 feac 	bl	80056ac <USB_ReadPMA>
 8001954:	e023      	b.n	800199e <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800195e:	b29b      	uxth	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4413      	add	r3, r2
 800196a:	3306      	adds	r3, #6
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	4413      	add	r3, r2
 8001974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800197e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001982:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001986:	2b00      	cmp	r3, #0
 8001988:	d009      	beq.n	800199e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001990:	6959      	ldr	r1, [r3, #20]
 8001992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001994:	895a      	ldrh	r2, [r3, #10]
 8001996:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800199a:	f003 fe87 	bl	80056ac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800199e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019a6:	441a      	add	r2, r3
 80019a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80019ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019b4:	441a      	add	r2, r3
 80019b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80019ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <PCD_EP_ISR_Handler+0x51c>
 80019c2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80019c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d206      	bcs.n	80019dc <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80019ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f005 fce9 	bl	80073ac <HAL_PCD_DataOutStageCallback>
 80019da:	e005      	b.n	80019e8 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 f92e 	bl	8003c44 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80019e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 8123 	beq.w	8001c3c <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80019f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	441a      	add	r2, r3
 8001a36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a48:	78db      	ldrb	r3, [r3, #3]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	f040 80a2 	bne.w	8001b94 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a58:	7b1b      	ldrb	r3, [r3, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8093 	beq.w	8001b86 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d046      	beq.n	8001afa <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6e:	785b      	ldrb	r3, [r3, #1]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d126      	bne.n	8001ac2 <PCD_EP_ISR_Handler+0x610>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	4413      	add	r3, r2
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	011a      	lsls	r2, r3, #4
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	4413      	add	r3, r2
 8001a96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001a9a:	623b      	str	r3, [r7, #32]
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	801a      	strh	r2, [r3, #0]
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	801a      	strh	r2, [r3, #0]
 8001ac0:	e061      	b.n	8001b86 <PCD_EP_ISR_Handler+0x6d4>
 8001ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac4:	785b      	ldrb	r3, [r3, #1]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d15d      	bne.n	8001b86 <PCD_EP_ISR_Handler+0x6d4>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ade:	4413      	add	r3, r2
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	011a      	lsls	r2, r3, #4
 8001ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aea:	4413      	add	r3, r2
 8001aec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af4:	2200      	movs	r2, #0
 8001af6:	801a      	strh	r2, [r3, #0]
 8001af8:	e045      	b.n	8001b86 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b02:	785b      	ldrb	r3, [r3, #1]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d126      	bne.n	8001b56 <PCD_EP_ISR_Handler+0x6a4>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1c:	4413      	add	r3, r2
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	011a      	lsls	r2, r3, #4
 8001b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b28:	4413      	add	r3, r2
 8001b2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3e:	801a      	strh	r2, [r3, #0]
 8001b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b52:	801a      	strh	r2, [r3, #0]
 8001b54:	e017      	b.n	8001b86 <PCD_EP_ISR_Handler+0x6d4>
 8001b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b58:	785b      	ldrb	r3, [r3, #1]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d113      	bne.n	8001b86 <PCD_EP_ISR_Handler+0x6d4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b6c:	4413      	add	r3, r2
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	011a      	lsls	r2, r3, #4
 8001b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b78:	4413      	add	r3, r2
 8001b7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b82:	2200      	movs	r2, #0
 8001b84:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f005 fc28 	bl	80073e2 <HAL_PCD_DataInStageCallback>
 8001b92:	e053      	b.n	8001c3c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001b94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d146      	bne.n	8001c2e <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bc8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d907      	bls.n	8001be8 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bda:	699a      	ldr	r2, [r3, #24]
 8001bdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001be0:	1ad2      	subs	r2, r2, r3
 8001be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be4:	619a      	str	r2, [r3, #24]
 8001be6:	e002      	b.n	8001bee <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bea:	2200      	movs	r2, #0
 8001bec:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f005 fbf0 	bl	80073e2 <HAL_PCD_DataInStageCallback>
 8001c02:	e01b      	b.n	8001c3c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c06:	695a      	ldr	r2, [r3, #20]
 8001c08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c0c:	441a      	add	r2, r3
 8001c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c10:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c14:	69da      	ldr	r2, [r3, #28]
 8001c16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c1a:	441a      	add	r2, r3
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c26:	4618      	mov	r0, r3
 8001c28:	f002 f80c 	bl	8003c44 <USB_EPStartXfer>
 8001c2c:	e006      	b.n	8001c3c <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001c2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c32:	461a      	mov	r2, r3
 8001c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f91b 	bl	8001e72 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f6ff ac37 	blt.w	80014bc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3758      	adds	r7, #88	; 0x58
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	4613      	mov	r3, r2
 8001c64:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d07e      	beq.n	8001d6e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	3302      	adds	r3, #2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c98:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	8b7b      	ldrh	r3, [r7, #26]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d306      	bcc.n	8001cb2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	8b7b      	ldrh	r3, [r7, #26]
 8001caa:	1ad2      	subs	r2, r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	619a      	str	r2, [r3, #24]
 8001cb0:	e002      	b.n	8001cb8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d123      	bne.n	8001d08 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cda:	833b      	strh	r3, [r7, #24]
 8001cdc:	8b3b      	ldrh	r3, [r7, #24]
 8001cde:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ce2:	833b      	strh	r3, [r7, #24]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	441a      	add	r2, r3
 8001cf2:	8b3b      	ldrh	r3, [r7, #24]
 8001cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01f      	beq.n	8001d52 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d2c:	82fb      	strh	r3, [r7, #22]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	441a      	add	r2, r3
 8001d3c:	8afb      	ldrh	r3, [r7, #22]
 8001d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d52:	8b7b      	ldrh	r3, [r7, #26]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8087 	beq.w	8001e68 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	6959      	ldr	r1, [r3, #20]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	891a      	ldrh	r2, [r3, #8]
 8001d66:	8b7b      	ldrh	r3, [r7, #26]
 8001d68:	f003 fca0 	bl	80056ac <USB_ReadPMA>
 8001d6c:	e07c      	b.n	8001e68 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	3306      	adds	r3, #6
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d96:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	699a      	ldr	r2, [r3, #24]
 8001d9c:	8b7b      	ldrh	r3, [r7, #26]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d306      	bcc.n	8001db0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	8b7b      	ldrh	r3, [r7, #26]
 8001da8:	1ad2      	subs	r2, r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	619a      	str	r2, [r3, #24]
 8001dae:	e002      	b.n	8001db6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d123      	bne.n	8001e06 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd8:	83fb      	strh	r3, [r7, #30]
 8001dda:	8bfb      	ldrh	r3, [r7, #30]
 8001ddc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001de0:	83fb      	strh	r3, [r7, #30]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	441a      	add	r2, r3
 8001df0:	8bfb      	ldrh	r3, [r7, #30]
 8001df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d11f      	bne.n	8001e50 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e2a:	83bb      	strh	r3, [r7, #28]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	441a      	add	r2, r3
 8001e3a:	8bbb      	ldrh	r3, [r7, #28]
 8001e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e50:	8b7b      	ldrh	r3, [r7, #26]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d008      	beq.n	8001e68 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	6959      	ldr	r1, [r3, #20]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	895a      	ldrh	r2, [r3, #10]
 8001e62:	8b7b      	ldrh	r3, [r7, #26]
 8001e64:	f003 fc22 	bl	80056ac <USB_ReadPMA>
    }
  }

  return count;
 8001e68:	8b7b      	ldrh	r3, [r7, #26]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3720      	adds	r7, #32
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b0a4      	sub	sp, #144	; 0x90
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 81dd 	beq.w	8002246 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	699a      	ldr	r2, [r3, #24]
 8001ebc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d907      	bls.n	8001ed4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	699a      	ldr	r2, [r3, #24]
 8001ec8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ecc:	1ad2      	subs	r2, r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	619a      	str	r2, [r3, #24]
 8001ed2:	e002      	b.n	8001eda <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 80b9 	bne.w	8002056 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	785b      	ldrb	r3, [r3, #1]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d126      	bne.n	8001f3a <HAL_PCD_EP_DB_Transmit+0xc8>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f00:	4413      	add	r3, r2
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	011a      	lsls	r2, r3, #4
 8001f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	801a      	strh	r2, [r3, #0]
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f36:	801a      	strh	r2, [r3, #0]
 8001f38:	e01a      	b.n	8001f70 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	785b      	ldrb	r3, [r3, #1]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d116      	bne.n	8001f70 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f56:	4413      	add	r3, r2
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	011a      	lsls	r2, r3, #4
 8001f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f62:	4413      	add	r3, r2
 8001f64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	785b      	ldrb	r3, [r3, #1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d126      	bne.n	8001fcc <HAL_PCD_EP_DB_Transmit+0x15a>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	4413      	add	r3, r2
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	011a      	lsls	r2, r3, #4
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	801a      	strh	r2, [r3, #0]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	801a      	strh	r2, [r3, #0]
 8001fca:	e017      	b.n	8001ffc <HAL_PCD_EP_DB_Transmit+0x18a>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	785b      	ldrb	r3, [r3, #1]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d113      	bne.n	8001ffc <HAL_PCD_EP_DB_Transmit+0x18a>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	4413      	add	r3, r2
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	011a      	lsls	r2, r3, #4
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	4413      	add	r3, r2
 8001ff0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ff4:	623b      	str	r3, [r7, #32]
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f005 f9ed 	bl	80073e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 82fc 	beq.w	800260c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800202a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202e:	82fb      	strh	r3, [r7, #22]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	441a      	add	r2, r3
 800203e:	8afb      	ldrh	r3, [r7, #22]
 8002040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800204c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002050:	b29b      	uxth	r3, r3
 8002052:	8013      	strh	r3, [r2, #0]
 8002054:	e2da      	b.n	800260c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d021      	beq.n	80020a4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	441a      	add	r2, r3
 800208c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800209c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	f040 82ae 	bne.w	800260c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020b8:	441a      	add	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	69da      	ldr	r2, [r3, #28]
 80020c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020c6:	441a      	add	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d30b      	bcc.n	80020f0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	6a1a      	ldr	r2, [r3, #32]
 80020e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020e8:	1ad2      	subs	r2, r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	621a      	str	r2, [r3, #32]
 80020ee:	e017      	b.n	8002120 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d108      	bne.n	800210a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80020f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002108:	e00a      	b.n	8002120 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2200      	movs	r2, #0
 800211e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	785b      	ldrb	r3, [r3, #1]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d165      	bne.n	80021f4 <HAL_PCD_EP_DB_Transmit+0x382>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002136:	b29b      	uxth	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213c:	4413      	add	r3, r2
 800213e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	011a      	lsls	r2, r3, #4
 8002146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002148:	4413      	add	r3, r2
 800214a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800214e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800215a:	b29a      	uxth	r2, r3
 800215c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215e:	801a      	strh	r2, [r3, #0]
 8002160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002164:	2b3e      	cmp	r3, #62	; 0x3e
 8002166:	d91d      	bls.n	80021a4 <HAL_PCD_EP_DB_Transmit+0x332>
 8002168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002170:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <HAL_PCD_EP_DB_Transmit+0x310>
 800217c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217e:	3b01      	subs	r3, #1
 8002180:	64bb      	str	r3, [r7, #72]	; 0x48
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	b29a      	uxth	r2, r3
 8002188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218a:	b29b      	uxth	r3, r3
 800218c:	029b      	lsls	r3, r3, #10
 800218e:	b29b      	uxth	r3, r3
 8002190:	4313      	orrs	r3, r2
 8002192:	b29b      	uxth	r3, r3
 8002194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800219c:	b29a      	uxth	r2, r3
 800219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	e044      	b.n	800222e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80021a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <HAL_PCD_EP_DB_Transmit+0x350>
 80021ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	801a      	strh	r2, [r3, #0]
 80021c0:	e035      	b.n	800222e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80021c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021c6:	085b      	lsrs	r3, r3, #1
 80021c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80021ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_PCD_EP_DB_Transmit+0x36a>
 80021d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d8:	3301      	adds	r3, #1
 80021da:	64bb      	str	r3, [r7, #72]	; 0x48
 80021dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	029b      	lsls	r3, r3, #10
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f0:	801a      	strh	r2, [r3, #0]
 80021f2:	e01c      	b.n	800222e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	785b      	ldrb	r3, [r3, #1]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d118      	bne.n	800222e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	647b      	str	r3, [r7, #68]	; 0x44
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002210:	4413      	add	r3, r2
 8002212:	647b      	str	r3, [r7, #68]	; 0x44
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	011a      	lsls	r2, r3, #4
 800221a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800221c:	4413      	add	r3, r2
 800221e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002222:	643b      	str	r3, [r7, #64]	; 0x40
 8002224:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002228:	b29a      	uxth	r2, r3
 800222a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800222c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	6959      	ldr	r1, [r3, #20]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	891a      	ldrh	r2, [r3, #8]
 800223a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800223e:	b29b      	uxth	r3, r3
 8002240:	f003 f9ef 	bl	8005622 <USB_WritePMA>
 8002244:	e1e2      	b.n	800260c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	3306      	adds	r3, #6
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	4413      	add	r3, r2
 8002264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800226e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800227a:	429a      	cmp	r2, r3
 800227c:	d307      	bcc.n	800228e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002286:	1ad2      	subs	r2, r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	619a      	str	r2, [r3, #24]
 800228c:	e002      	b.n	8002294 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 80c0 	bne.w	800241e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	785b      	ldrb	r3, [r3, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d126      	bne.n	80022f4 <HAL_PCD_EP_DB_Transmit+0x482>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022ba:	4413      	add	r3, r2
 80022bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	011a      	lsls	r2, r3, #4
 80022c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022c6:	4413      	add	r3, r2
 80022c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80022ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d8:	b29a      	uxth	r2, r3
 80022da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022dc:	801a      	strh	r2, [r3, #0]
 80022de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022f0:	801a      	strh	r2, [r3, #0]
 80022f2:	e01a      	b.n	800232a <HAL_PCD_EP_DB_Transmit+0x4b8>
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	785b      	ldrb	r3, [r3, #1]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d116      	bne.n	800232a <HAL_PCD_EP_DB_Transmit+0x4b8>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	667b      	str	r3, [r7, #100]	; 0x64
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230a:	b29b      	uxth	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002310:	4413      	add	r3, r2
 8002312:	667b      	str	r3, [r7, #100]	; 0x64
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	011a      	lsls	r2, r3, #4
 800231a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800231c:	4413      	add	r3, r2
 800231e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002322:	663b      	str	r3, [r7, #96]	; 0x60
 8002324:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002326:	2200      	movs	r2, #0
 8002328:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	677b      	str	r3, [r7, #116]	; 0x74
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	785b      	ldrb	r3, [r3, #1]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d12b      	bne.n	8002390 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234c:	4413      	add	r3, r2
 800234e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	011a      	lsls	r2, r3, #4
 8002356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002358:	4413      	add	r3, r2
 800235a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800235e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002362:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	b29b      	uxth	r3, r3
 800236a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800236e:	b29a      	uxth	r2, r3
 8002370:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002374:	801a      	strh	r2, [r3, #0]
 8002376:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b29b      	uxth	r3, r3
 800237e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002386:	b29a      	uxth	r2, r3
 8002388:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800238c:	801a      	strh	r2, [r3, #0]
 800238e:	e017      	b.n	80023c0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	785b      	ldrb	r3, [r3, #1]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d113      	bne.n	80023c0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023a6:	4413      	add	r3, r2
 80023a8:	677b      	str	r3, [r7, #116]	; 0x74
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	011a      	lsls	r2, r3, #4
 80023b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b2:	4413      	add	r3, r2
 80023b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023b8:	673b      	str	r3, [r7, #112]	; 0x70
 80023ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023bc:	2200      	movs	r2, #0
 80023be:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f005 f80b 	bl	80073e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 811a 	bne.w	800260c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	441a      	add	r2, r3
 8002404:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800240c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002410:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002418:	b29b      	uxth	r3, r3
 800241a:	8013      	strh	r3, [r2, #0]
 800241c:	e0f6      	b.n	800260c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d121      	bne.n	800246c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800243e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002442:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	441a      	add	r2, r3
 8002454:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800245c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002468:	b29b      	uxth	r3, r3
 800246a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002472:	2b01      	cmp	r3, #1
 8002474:	f040 80ca 	bne.w	800260c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002480:	441a      	add	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800248e:	441a      	add	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	6a1a      	ldr	r2, [r3, #32]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	429a      	cmp	r2, r3
 800249e:	d30b      	bcc.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6a1a      	ldr	r2, [r3, #32]
 80024ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024b0:	1ad2      	subs	r2, r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	621a      	str	r2, [r3, #32]
 80024b6:	e017      	b.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d108      	bne.n	80024d2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80024c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024d0:	e00a      	b.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2200      	movs	r2, #0
 80024de:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	657b      	str	r3, [r7, #84]	; 0x54
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	785b      	ldrb	r3, [r3, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d165      	bne.n	80025c2 <HAL_PCD_EP_DB_Transmit+0x750>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002504:	b29b      	uxth	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800250a:	4413      	add	r3, r2
 800250c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	011a      	lsls	r2, r3, #4
 8002514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002516:	4413      	add	r3, r2
 8002518:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800251c:	65bb      	str	r3, [r7, #88]	; 0x58
 800251e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002528:	b29a      	uxth	r2, r3
 800252a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002532:	2b3e      	cmp	r3, #62	; 0x3e
 8002534:	d91d      	bls.n	8002572 <HAL_PCD_EP_DB_Transmit+0x700>
 8002536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	66bb      	str	r3, [r7, #104]	; 0x68
 800253e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_PCD_EP_DB_Transmit+0x6de>
 800254a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800254c:	3b01      	subs	r3, #1
 800254e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29a      	uxth	r2, r3
 8002556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002558:	b29b      	uxth	r3, r3
 800255a:	029b      	lsls	r3, r3, #10
 800255c:	b29b      	uxth	r3, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	b29b      	uxth	r3, r3
 8002562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800256a:	b29a      	uxth	r2, r3
 800256c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800256e:	801a      	strh	r2, [r3, #0]
 8002570:	e041      	b.n	80025f6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10a      	bne.n	8002590 <HAL_PCD_EP_DB_Transmit+0x71e>
 800257a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002588:	b29a      	uxth	r2, r3
 800258a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800258c:	801a      	strh	r2, [r3, #0]
 800258e:	e032      	b.n	80025f6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	66bb      	str	r3, [r7, #104]	; 0x68
 8002598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_PCD_EP_DB_Transmit+0x738>
 80025a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025a6:	3301      	adds	r3, #1
 80025a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80025aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	029b      	lsls	r3, r3, #10
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4313      	orrs	r3, r2
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025be:	801a      	strh	r2, [r3, #0]
 80025c0:	e019      	b.n	80025f6 <HAL_PCD_EP_DB_Transmit+0x784>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	785b      	ldrb	r3, [r3, #1]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d115      	bne.n	80025f6 <HAL_PCD_EP_DB_Transmit+0x784>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d8:	4413      	add	r3, r2
 80025da:	657b      	str	r3, [r7, #84]	; 0x54
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	011a      	lsls	r2, r3, #4
 80025e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e4:	4413      	add	r3, r2
 80025e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025ea:	653b      	str	r3, [r7, #80]	; 0x50
 80025ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025f4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	6959      	ldr	r1, [r3, #20]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	895a      	ldrh	r2, [r3, #10]
 8002602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002606:	b29b      	uxth	r3, r3
 8002608:	f003 f80b 	bl	8005622 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002626:	82bb      	strh	r3, [r7, #20]
 8002628:	8abb      	ldrh	r3, [r7, #20]
 800262a:	f083 0310 	eor.w	r3, r3, #16
 800262e:	82bb      	strh	r3, [r7, #20]
 8002630:	8abb      	ldrh	r3, [r7, #20]
 8002632:	f083 0320 	eor.w	r3, r3, #32
 8002636:	82bb      	strh	r3, [r7, #20]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	441a      	add	r2, r3
 8002646:	8abb      	ldrh	r3, [r7, #20]
 8002648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800264c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002658:	b29b      	uxth	r3, r3
 800265a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3790      	adds	r7, #144	; 0x90
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002666:	b480      	push	{r7}
 8002668:	b087      	sub	sp, #28
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	817b      	strh	r3, [r7, #10]
 8002674:	4613      	mov	r3, r2
 8002676:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002678:	897b      	ldrh	r3, [r7, #10]
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002684:	897b      	ldrh	r3, [r7, #10]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4413      	add	r3, r2
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	e009      	b.n	80026b0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800269c:	897a      	ldrh	r2, [r7, #10]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4413      	add	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026b0:	893b      	ldrh	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d107      	bne.n	80026c6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2200      	movs	r2, #0
 80026ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	80da      	strh	r2, [r3, #6]
 80026c4:	e00b      	b.n	80026de <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2201      	movs	r2, #1
 80026ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	b29a      	uxth	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	371c      	adds	r7, #28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e272      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8087 	beq.w	800281a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800270c:	4b92      	ldr	r3, [pc, #584]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b04      	cmp	r3, #4
 8002716:	d00c      	beq.n	8002732 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002718:	4b8f      	ldr	r3, [pc, #572]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b08      	cmp	r3, #8
 8002722:	d112      	bne.n	800274a <HAL_RCC_OscConfig+0x5e>
 8002724:	4b8c      	ldr	r3, [pc, #560]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002730:	d10b      	bne.n	800274a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002732:	4b89      	ldr	r3, [pc, #548]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d06c      	beq.n	8002818 <HAL_RCC_OscConfig+0x12c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d168      	bne.n	8002818 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e24c      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002752:	d106      	bne.n	8002762 <HAL_RCC_OscConfig+0x76>
 8002754:	4b80      	ldr	r3, [pc, #512]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a7f      	ldr	r2, [pc, #508]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800275a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e02e      	b.n	80027c0 <HAL_RCC_OscConfig+0xd4>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10c      	bne.n	8002784 <HAL_RCC_OscConfig+0x98>
 800276a:	4b7b      	ldr	r3, [pc, #492]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a7a      	ldr	r2, [pc, #488]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b78      	ldr	r3, [pc, #480]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a77      	ldr	r2, [pc, #476]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800277c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e01d      	b.n	80027c0 <HAL_RCC_OscConfig+0xd4>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0xbc>
 800278e:	4b72      	ldr	r3, [pc, #456]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a71      	ldr	r2, [pc, #452]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	4b6f      	ldr	r3, [pc, #444]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a6e      	ldr	r2, [pc, #440]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e00b      	b.n	80027c0 <HAL_RCC_OscConfig+0xd4>
 80027a8:	4b6b      	ldr	r3, [pc, #428]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a6a      	ldr	r2, [pc, #424]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80027ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	4b68      	ldr	r3, [pc, #416]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a67      	ldr	r2, [pc, #412]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d013      	beq.n	80027f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fd ff30 	bl	800062c <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d0:	f7fd ff2c 	bl	800062c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e200      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b5d      	ldr	r3, [pc, #372]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0xe4>
 80027ee:	e014      	b.n	800281a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7fd ff1c 	bl	800062c <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f8:	f7fd ff18 	bl	800062c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e1ec      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280a:	4b53      	ldr	r3, [pc, #332]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x10c>
 8002816:	e000      	b.n	800281a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d063      	beq.n	80028ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002826:	4b4c      	ldr	r3, [pc, #304]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00b      	beq.n	800284a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002832:	4b49      	ldr	r3, [pc, #292]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b08      	cmp	r3, #8
 800283c:	d11c      	bne.n	8002878 <HAL_RCC_OscConfig+0x18c>
 800283e:	4b46      	ldr	r3, [pc, #280]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d116      	bne.n	8002878 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284a:	4b43      	ldr	r3, [pc, #268]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_RCC_OscConfig+0x176>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d001      	beq.n	8002862 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e1c0      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4939      	ldr	r1, [pc, #228]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002876:	e03a      	b.n	80028ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d020      	beq.n	80028c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002880:	4b36      	ldr	r3, [pc, #216]	; (800295c <HAL_RCC_OscConfig+0x270>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7fd fed1 	bl	800062c <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288e:	f7fd fecd 	bl	800062c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e1a1      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ac:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4927      	ldr	r1, [pc, #156]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	600b      	str	r3, [r1, #0]
 80028c0:	e015      	b.n	80028ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c2:	4b26      	ldr	r3, [pc, #152]	; (800295c <HAL_RCC_OscConfig+0x270>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7fd feb0 	bl	800062c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d0:	f7fd feac 	bl	800062c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e180      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e2:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d03a      	beq.n	8002970 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d019      	beq.n	8002936 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <HAL_RCC_OscConfig+0x274>)
 8002904:	2201      	movs	r2, #1
 8002906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002908:	f7fd fe90 	bl	800062c <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002910:	f7fd fe8c 	bl	800062c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e160      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <HAL_RCC_OscConfig+0x26c>)
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800292e:	2001      	movs	r0, #1
 8002930:	f000 fa9c 	bl	8002e6c <RCC_Delay>
 8002934:	e01c      	b.n	8002970 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_RCC_OscConfig+0x274>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293c:	f7fd fe76 	bl	800062c <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002942:	e00f      	b.n	8002964 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002944:	f7fd fe72 	bl	800062c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d908      	bls.n	8002964 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e146      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	42420000 	.word	0x42420000
 8002960:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002964:	4b92      	ldr	r3, [pc, #584]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e9      	bne.n	8002944 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80a6 	beq.w	8002aca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002982:	4b8b      	ldr	r3, [pc, #556]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10d      	bne.n	80029aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	4b88      	ldr	r3, [pc, #544]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4a87      	ldr	r2, [pc, #540]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	61d3      	str	r3, [r2, #28]
 800299a:	4b85      	ldr	r3, [pc, #532]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b82      	ldr	r3, [pc, #520]	; (8002bb4 <HAL_RCC_OscConfig+0x4c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d118      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b6:	4b7f      	ldr	r3, [pc, #508]	; (8002bb4 <HAL_RCC_OscConfig+0x4c8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a7e      	ldr	r2, [pc, #504]	; (8002bb4 <HAL_RCC_OscConfig+0x4c8>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c2:	f7fd fe33 	bl	800062c <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ca:	f7fd fe2f 	bl	800062c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b64      	cmp	r3, #100	; 0x64
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e103      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	4b75      	ldr	r3, [pc, #468]	; (8002bb4 <HAL_RCC_OscConfig+0x4c8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x312>
 80029f0:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	4a6e      	ldr	r2, [pc, #440]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6213      	str	r3, [r2, #32]
 80029fc:	e02d      	b.n	8002a5a <HAL_RCC_OscConfig+0x36e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x334>
 8002a06:	4b6a      	ldr	r3, [pc, #424]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4a69      	ldr	r2, [pc, #420]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	6213      	str	r3, [r2, #32]
 8002a12:	4b67      	ldr	r3, [pc, #412]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4a66      	ldr	r2, [pc, #408]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	6213      	str	r3, [r2, #32]
 8002a1e:	e01c      	b.n	8002a5a <HAL_RCC_OscConfig+0x36e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b05      	cmp	r3, #5
 8002a26:	d10c      	bne.n	8002a42 <HAL_RCC_OscConfig+0x356>
 8002a28:	4b61      	ldr	r3, [pc, #388]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a60      	ldr	r2, [pc, #384]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	4b5e      	ldr	r3, [pc, #376]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4a5d      	ldr	r2, [pc, #372]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6213      	str	r3, [r2, #32]
 8002a40:	e00b      	b.n	8002a5a <HAL_RCC_OscConfig+0x36e>
 8002a42:	4b5b      	ldr	r3, [pc, #364]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a5a      	ldr	r2, [pc, #360]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6213      	str	r3, [r2, #32]
 8002a4e:	4b58      	ldr	r3, [pc, #352]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4a57      	ldr	r2, [pc, #348]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	f023 0304 	bic.w	r3, r3, #4
 8002a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d015      	beq.n	8002a8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7fd fde3 	bl	800062c <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7fd fddf 	bl	800062c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0b1      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a80:	4b4b      	ldr	r3, [pc, #300]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ee      	beq.n	8002a6a <HAL_RCC_OscConfig+0x37e>
 8002a8c:	e014      	b.n	8002ab8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8e:	f7fd fdcd 	bl	800062c <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fd fdc9 	bl	800062c <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e09b      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aac:	4b40      	ldr	r3, [pc, #256]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1ee      	bne.n	8002a96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d105      	bne.n	8002aca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abe:	4b3c      	ldr	r3, [pc, #240]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4a3b      	ldr	r2, [pc, #236]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 8087 	beq.w	8002be2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ad4:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d061      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d146      	bne.n	8002b76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae8:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7fd fd9d 	bl	800062c <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af6:	f7fd fd99 	bl	800062c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e06d      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b08:	4b29      	ldr	r3, [pc, #164]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f0      	bne.n	8002af6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1c:	d108      	bne.n	8002b30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	4921      	ldr	r1, [pc, #132]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b30:	4b1f      	ldr	r3, [pc, #124]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a19      	ldr	r1, [r3, #32]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	430b      	orrs	r3, r1
 8002b42:	491b      	ldr	r1, [pc, #108]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fd fd6d 	bl	800062c <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fd fd69 	bl	800062c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e03d      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x46a>
 8002b74:	e035      	b.n	8002be2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fd fd56 	bl	800062c <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fd fd52 	bl	800062c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e026      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x498>
 8002ba2:	e01e      	b.n	8002be2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e019      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_OscConfig+0x500>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000

08002bf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0d0      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c04:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d910      	bls.n	8002c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b67      	ldr	r3, [pc, #412]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 0207 	bic.w	r2, r3, #7
 8002c1a:	4965      	ldr	r1, [pc, #404]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b63      	ldr	r3, [pc, #396]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0b8      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d020      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c4c:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a58      	ldr	r2, [pc, #352]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c64:	4b53      	ldr	r3, [pc, #332]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4a52      	ldr	r2, [pc, #328]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c70:	4b50      	ldr	r3, [pc, #320]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	494d      	ldr	r1, [pc, #308]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d040      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d115      	bne.n	8002cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e07f      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cae:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e073      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbe:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e06b      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cce:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f023 0203 	bic.w	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4936      	ldr	r1, [pc, #216]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce0:	f7fd fca4 	bl	800062c <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce8:	f7fd fca0 	bl	800062c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e053      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 020c 	and.w	r2, r3, #12
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d1eb      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d10:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d210      	bcs.n	8002d40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 0207 	bic.w	r2, r3, #7
 8002d26:	4922      	ldr	r1, [pc, #136]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e032      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4916      	ldr	r1, [pc, #88]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	490e      	ldr	r1, [pc, #56]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d7e:	f000 f821 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8002d82:	4602      	mov	r2, r0
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	490a      	ldr	r1, [pc, #40]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d90:	5ccb      	ldrb	r3, [r1, r3]
 8002d92:	fa22 f303 	lsr.w	r3, r2, r3
 8002d96:	4a09      	ldr	r2, [pc, #36]	; (8002dbc <HAL_RCC_ClockConfig+0x1cc>)
 8002d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_ClockConfig+0x1d0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fc02 	bl	80005a8 <HAL_InitTick>

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40022000 	.word	0x40022000
 8002db4:	40021000 	.word	0x40021000
 8002db8:	08007970 	.word	0x08007970
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	2000000c 	.word	0x2000000c

08002dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x94>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d002      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x30>
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d003      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0x36>
 8002df2:	e027      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x98>)
 8002df6:	613b      	str	r3, [r7, #16]
      break;
 8002df8:	e027      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	0c9b      	lsrs	r3, r3, #18
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	4a17      	ldr	r2, [pc, #92]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e04:	5cd3      	ldrb	r3, [r2, r3]
 8002e06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d010      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	0c5b      	lsrs	r3, r3, #17
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e1e:	5cd3      	ldrb	r3, [r2, r3]
 8002e20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e26:	fb03 f202 	mul.w	r2, r3, r2
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e004      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a0c      	ldr	r2, [pc, #48]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e38:	fb02 f303 	mul.w	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	613b      	str	r3, [r7, #16]
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e46:	613b      	str	r3, [r7, #16]
      break;
 8002e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e4a:	693b      	ldr	r3, [r7, #16]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	007a1200 	.word	0x007a1200
 8002e60:	08007980 	.word	0x08007980
 8002e64:	08007990 	.word	0x08007990
 8002e68:	003d0900 	.word	0x003d0900

08002e6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e74:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <RCC_Delay+0x34>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <RCC_Delay+0x38>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	0a5b      	lsrs	r3, r3, #9
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e88:	bf00      	nop
  }
  while (Delay --);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1e5a      	subs	r2, r3, #1
 8002e8e:	60fa      	str	r2, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f9      	bne.n	8002e88 <RCC_Delay+0x1c>
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	20000000 	.word	0x20000000
 8002ea4:	10624dd3 	.word	0x10624dd3

08002ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d07d      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec8:	4b4f      	ldr	r3, [pc, #316]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed4:	4b4c      	ldr	r3, [pc, #304]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4a4b      	ldr	r2, [pc, #300]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ede:	61d3      	str	r3, [r2, #28]
 8002ee0:	4b49      	ldr	r3, [pc, #292]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eec:	2301      	movs	r3, #1
 8002eee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	4b46      	ldr	r3, [pc, #280]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d118      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efc:	4b43      	ldr	r3, [pc, #268]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a42      	ldr	r2, [pc, #264]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f08:	f7fd fb90 	bl	800062c <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0e:	e008      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f10:	f7fd fb8c 	bl	800062c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e06d      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f22:	4b3a      	ldr	r3, [pc, #232]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f2e:	4b36      	ldr	r3, [pc, #216]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d02e      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d027      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f4c:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f56:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f5c:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f62:	4a29      	ldr	r2, [pc, #164]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d014      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f72:	f7fd fb5b 	bl	800062c <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fd fb57 	bl	800062c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e036      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f90:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ee      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4917      	ldr	r1, [pc, #92]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d105      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb4:	4b14      	ldr	r3, [pc, #80]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	4a13      	ldr	r2, [pc, #76]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fcc:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	490b      	ldr	r1, [pc, #44]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	4904      	ldr	r1, [pc, #16]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	40007000 	.word	0x40007000
 8003010:	42420440 	.word	0x42420440

08003014 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003014:	b084      	sub	sp, #16
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	f107 0014 	add.w	r0, r7, #20
 8003022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	b004      	add	sp, #16
 8003032:	4770      	bx	lr

08003034 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003044:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003048:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	b29a      	uxth	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003068:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800306c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	b29b      	uxth	r3, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	b29b      	uxth	r3, r3
 800307e:	4013      	ands	r3, r2
 8003080:	b29a      	uxth	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80030ac:	b084      	sub	sp, #16
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	f107 0014 	add.w	r0, r7, #20
 80030ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	b004      	add	sp, #16
 80030ea:	4770      	bx	lr

080030ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b09d      	sub	sp, #116	; 0x74
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	78db      	ldrb	r3, [r3, #3]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d81f      	bhi.n	800315e <USB_ActivateEndpoint+0x72>
 800311e:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <USB_ActivateEndpoint+0x38>)
 8003120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003124:	08003135 	.word	0x08003135
 8003128:	08003151 	.word	0x08003151
 800312c:	08003167 	.word	0x08003167
 8003130:	08003143 	.word	0x08003143
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003134:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800313c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003140:	e012      	b.n	8003168 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003142:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003146:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800314a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800314e:	e00b      	b.n	8003168 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003150:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003154:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003158:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800315c:	e004      	b.n	8003168 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003164:	e000      	b.n	8003168 <USB_ActivateEndpoint+0x7c>
      break;
 8003166:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	441a      	add	r2, r3
 8003172:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800317a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800317e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003186:	b29b      	uxth	r3, r3
 8003188:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80031bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	7b1b      	ldrb	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f040 8178 	bne.w	80034ca <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	785b      	ldrb	r3, [r3, #1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8084 	beq.w	80032ec <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	4413      	add	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	011a      	lsls	r2, r3, #4
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	88db      	ldrh	r3, [r3, #6]
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	b29b      	uxth	r3, r3
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	827b      	strh	r3, [r7, #18]
 8003226:	8a7b      	ldrh	r3, [r7, #18]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01b      	beq.n	8003268 <USB_ActivateEndpoint+0x17c>
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29b      	uxth	r3, r3
 800323e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003246:	823b      	strh	r3, [r7, #16]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	441a      	add	r2, r3
 8003252:	8a3b      	ldrh	r3, [r7, #16]
 8003254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800325c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003260:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003264:	b29b      	uxth	r3, r3
 8003266:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	78db      	ldrb	r3, [r3, #3]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d020      	beq.n	80032b2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003286:	81bb      	strh	r3, [r7, #12]
 8003288:	89bb      	ldrh	r3, [r7, #12]
 800328a:	f083 0320 	eor.w	r3, r3, #32
 800328e:	81bb      	strh	r3, [r7, #12]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	441a      	add	r2, r3
 800329a:	89bb      	ldrh	r3, [r7, #12]
 800329c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	8013      	strh	r3, [r2, #0]
 80032b0:	e2d5      	b.n	800385e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c8:	81fb      	strh	r3, [r7, #14]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	441a      	add	r2, r3
 80032d4:	89fb      	ldrh	r3, [r7, #14]
 80032d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	8013      	strh	r3, [r2, #0]
 80032ea:	e2b8      	b.n	800385e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	633b      	str	r3, [r7, #48]	; 0x30
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	4413      	add	r3, r2
 80032fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	011a      	lsls	r2, r3, #4
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	4413      	add	r3, r2
 800330a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	88db      	ldrh	r3, [r3, #6]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	b29b      	uxth	r3, r3
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800332a:	b29b      	uxth	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	4413      	add	r3, r2
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	011a      	lsls	r2, r3, #4
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	4413      	add	r3, r2
 800333e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800334e:	b29a      	uxth	r2, r3
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	801a      	strh	r2, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2b3e      	cmp	r3, #62	; 0x3e
 800335a:	d91d      	bls.n	8003398 <USB_ActivateEndpoint+0x2ac>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	66bb      	str	r3, [r7, #104]	; 0x68
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <USB_ActivateEndpoint+0x28a>
 8003370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003372:	3b01      	subs	r3, #1
 8003374:	66bb      	str	r3, [r7, #104]	; 0x68
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29a      	uxth	r2, r3
 800337c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800337e:	b29b      	uxth	r3, r3
 8003380:	029b      	lsls	r3, r3, #10
 8003382:	b29b      	uxth	r3, r3
 8003384:	4313      	orrs	r3, r2
 8003386:	b29b      	uxth	r3, r3
 8003388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800338c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003390:	b29a      	uxth	r2, r3
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	801a      	strh	r2, [r3, #0]
 8003396:	e026      	b.n	80033e6 <USB_ActivateEndpoint+0x2fa>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <USB_ActivateEndpoint+0x2ca>
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	801a      	strh	r2, [r3, #0]
 80033b4:	e017      	b.n	80033e6 <USB_ActivateEndpoint+0x2fa>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <USB_ActivateEndpoint+0x2e4>
 80033ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033cc:	3301      	adds	r3, #1
 80033ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033d8:	b29b      	uxth	r3, r3
 80033da:	029b      	lsls	r3, r3, #10
 80033dc:	b29b      	uxth	r3, r3
 80033de:	4313      	orrs	r3, r2
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80033f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01b      	beq.n	8003436 <USB_ActivateEndpoint+0x34a>
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003414:	843b      	strh	r3, [r7, #32]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	441a      	add	r2, r3
 8003420:	8c3b      	ldrh	r3, [r7, #32]
 8003422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800342a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800342e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003432:	b29b      	uxth	r3, r3
 8003434:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d124      	bne.n	8003488 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003454:	83bb      	strh	r3, [r7, #28]
 8003456:	8bbb      	ldrh	r3, [r7, #28]
 8003458:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800345c:	83bb      	strh	r3, [r7, #28]
 800345e:	8bbb      	ldrh	r3, [r7, #28]
 8003460:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003464:	83bb      	strh	r3, [r7, #28]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	441a      	add	r2, r3
 8003470:	8bbb      	ldrh	r3, [r7, #28]
 8003472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800347a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800347e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003482:	b29b      	uxth	r3, r3
 8003484:	8013      	strh	r3, [r2, #0]
 8003486:	e1ea      	b.n	800385e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	b29b      	uxth	r3, r3
 8003496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800349a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349e:	83fb      	strh	r3, [r7, #30]
 80034a0:	8bfb      	ldrh	r3, [r7, #30]
 80034a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034a6:	83fb      	strh	r3, [r7, #30]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	441a      	add	r2, r3
 80034b2:	8bfb      	ldrh	r3, [r7, #30]
 80034b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	8013      	strh	r3, [r2, #0]
 80034c8:	e1c9      	b.n	800385e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	78db      	ldrb	r3, [r3, #3]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d11e      	bne.n	8003510 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	441a      	add	r2, r3
 80034f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80034fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003502:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350a:	b29b      	uxth	r3, r3
 800350c:	8013      	strh	r3, [r2, #0]
 800350e:	e01d      	b.n	800354c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	441a      	add	r2, r3
 8003534:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800353c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003548:	b29b      	uxth	r3, r3
 800354a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003556:	b29b      	uxth	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355c:	4413      	add	r3, r2
 800355e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	011a      	lsls	r2, r3, #4
 8003566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003568:	4413      	add	r3, r2
 800356a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800356e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	891b      	ldrh	r3, [r3, #8]
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	b29b      	uxth	r3, r3
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800357e:	801a      	strh	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	657b      	str	r3, [r7, #84]	; 0x54
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800358a:	b29b      	uxth	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003590:	4413      	add	r3, r2
 8003592:	657b      	str	r3, [r7, #84]	; 0x54
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	011a      	lsls	r2, r3, #4
 800359a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359c:	4413      	add	r3, r2
 800359e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80035a2:	653b      	str	r3, [r7, #80]	; 0x50
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	895b      	ldrh	r3, [r3, #10]
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	785b      	ldrb	r3, [r3, #1]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f040 8093 	bne.w	80036e4 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80035ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d01b      	beq.n	8003612 <USB_ActivateEndpoint+0x526>
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	441a      	add	r2, r3
 80035fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80035fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800360a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360e:	b29b      	uxth	r3, r3
 8003610:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003620:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01b      	beq.n	8003662 <USB_ActivateEndpoint+0x576>
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003640:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	441a      	add	r2, r3
 800364c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800364e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800365a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800365e:	b29b      	uxth	r3, r3
 8003660:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003678:	873b      	strh	r3, [r7, #56]	; 0x38
 800367a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800367c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003680:	873b      	strh	r3, [r7, #56]	; 0x38
 8003682:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003684:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003688:	873b      	strh	r3, [r7, #56]	; 0x38
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	441a      	add	r2, r3
 8003694:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800369a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800369e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	441a      	add	r2, r3
 80036cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036de:	b29b      	uxth	r3, r3
 80036e0:	8013      	strh	r3, [r2, #0]
 80036e2:	e0bc      	b.n	800385e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80036f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01d      	beq.n	800373c <USB_ActivateEndpoint+0x650>
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003716:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	441a      	add	r2, r3
 8003724:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800372c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003738:	b29b      	uxth	r3, r3
 800373a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800374c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01d      	beq.n	8003794 <USB_ActivateEndpoint+0x6a8>
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800376a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	441a      	add	r2, r3
 800377c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800378c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003790:	b29b      	uxth	r3, r3
 8003792:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	78db      	ldrb	r3, [r3, #3]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d024      	beq.n	80037e6 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80037b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037ba:	f083 0320 	eor.w	r3, r3, #32
 80037be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	441a      	add	r2, r3
 80037cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	8013      	strh	r3, [r2, #0]
 80037e4:	e01d      	b.n	8003822 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	441a      	add	r2, r3
 800380a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800380e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800381e:	b29b      	uxth	r3, r3
 8003820:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003838:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	441a      	add	r2, r3
 8003846:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800384a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800384e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800385a:	b29b      	uxth	r3, r3
 800385c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800385e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003862:	4618      	mov	r0, r3
 8003864:	3774      	adds	r7, #116	; 0x74
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800386c:	b480      	push	{r7}
 800386e:	b08d      	sub	sp, #52	; 0x34
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	7b1b      	ldrb	r3, [r3, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 808e 	bne.w	800399c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	785b      	ldrb	r3, [r3, #1]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d044      	beq.n	8003912 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	81bb      	strh	r3, [r7, #12]
 8003896:	89bb      	ldrh	r3, [r7, #12]
 8003898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01b      	beq.n	80038d8 <USB_DeactivateEndpoint+0x6c>
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	817b      	strh	r3, [r7, #10]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	441a      	add	r2, r3
 80038c2:	897b      	ldrh	r3, [r7, #10]
 80038c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ee:	813b      	strh	r3, [r7, #8]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	441a      	add	r2, r3
 80038fa:	893b      	ldrh	r3, [r7, #8]
 80038fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800390c:	b29b      	uxth	r3, r3
 800390e:	8013      	strh	r3, [r2, #0]
 8003910:	e192      	b.n	8003c38 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	827b      	strh	r3, [r7, #18]
 8003920:	8a7b      	ldrh	r3, [r7, #18]
 8003922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01b      	beq.n	8003962 <USB_DeactivateEndpoint+0xf6>
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003940:	823b      	strh	r3, [r7, #16]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	441a      	add	r2, r3
 800394c:	8a3b      	ldrh	r3, [r7, #16]
 800394e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800395a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800395e:	b29b      	uxth	r3, r3
 8003960:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	b29b      	uxth	r3, r3
 8003970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003978:	81fb      	strh	r3, [r7, #14]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	441a      	add	r2, r3
 8003984:	89fb      	ldrh	r3, [r7, #14]
 8003986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800398a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800398e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003996:	b29b      	uxth	r3, r3
 8003998:	8013      	strh	r3, [r2, #0]
 800399a:	e14d      	b.n	8003c38 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f040 80a5 	bne.w	8003af0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	843b      	strh	r3, [r7, #32]
 80039b4:	8c3b      	ldrh	r3, [r7, #32]
 80039b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01b      	beq.n	80039f6 <USB_DeactivateEndpoint+0x18a>
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d4:	83fb      	strh	r3, [r7, #30]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	441a      	add	r2, r3
 80039e0:	8bfb      	ldrh	r3, [r7, #30]
 80039e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	83bb      	strh	r3, [r7, #28]
 8003a04:	8bbb      	ldrh	r3, [r7, #28]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01b      	beq.n	8003a46 <USB_DeactivateEndpoint+0x1da>
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a24:	837b      	strh	r3, [r7, #26]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	441a      	add	r2, r3
 8003a30:	8b7b      	ldrh	r3, [r7, #26]
 8003a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5c:	833b      	strh	r3, [r7, #24]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	441a      	add	r2, r3
 8003a68:	8b3b      	ldrh	r3, [r7, #24]
 8003a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a94:	82fb      	strh	r3, [r7, #22]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	441a      	add	r2, r3
 8003aa0:	8afb      	ldrh	r3, [r7, #22]
 8003aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003acc:	82bb      	strh	r3, [r7, #20]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	441a      	add	r2, r3
 8003ad8:	8abb      	ldrh	r3, [r7, #20]
 8003ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	8013      	strh	r3, [r2, #0]
 8003aee:	e0a3      	b.n	8003c38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003afe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01b      	beq.n	8003b40 <USB_DeactivateEndpoint+0x2d4>
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	441a      	add	r2, r3
 8003b2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003b4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01b      	beq.n	8003b90 <USB_DeactivateEndpoint+0x324>
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	441a      	add	r2, r3
 8003b7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	441a      	add	r2, r3
 8003bb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bde:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	441a      	add	r2, r3
 8003bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c16:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	441a      	add	r2, r3
 8003c22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3734      	adds	r7, #52	; 0x34
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b0c2      	sub	sp, #264	; 0x108
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c52:	6018      	str	r0, [r3, #0]
 8003c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c5c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	785b      	ldrb	r3, [r3, #1]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	f040 86b7 	bne.w	80049de <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d908      	bls.n	8003c9e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c9c:	e007      	b.n	8003cae <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	7b1b      	ldrb	r3, [r3, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d13a      	bne.n	8003d34 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6959      	ldr	r1, [r3, #20]
 8003cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	88da      	ldrh	r2, [r3, #6]
 8003cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003ce0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003ce4:	6800      	ldr	r0, [r0, #0]
 8003ce6:	f001 fc9c 	bl	8005622 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	011a      	lsls	r2, r3, #4
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	801a      	strh	r2, [r3, #0]
 8003d30:	f000 be1f 	b.w	8004972 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	78db      	ldrb	r3, [r3, #3]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	f040 8462 	bne.w	800460a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6a1a      	ldr	r2, [r3, #32]
 8003d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	f240 83df 	bls.w	8004522 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	441a      	add	r2, r3
 8003da8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6a1a      	ldr	r2, [r3, #32]
 8003dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dd0:	1ad2      	subs	r2, r2, r3
 8003dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 81c7 	beq.w	8004194 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	633b      	str	r3, [r7, #48]	; 0x30
 8003e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	785b      	ldrb	r3, [r3, #1]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d177      	bne.n	8003f12 <USB_EPStartXfer+0x2ce>
 8003e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	4413      	add	r3, r2
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	011a      	lsls	r2, r3, #4
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	4413      	add	r3, r2
 8003e58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	801a      	strh	r2, [r3, #0]
 8003e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e72:	2b3e      	cmp	r3, #62	; 0x3e
 8003e74:	d921      	bls.n	8003eba <USB_EPStartXfer+0x276>
 8003e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <USB_EPStartXfer+0x252>
 8003e8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003e90:	3b01      	subs	r3, #1
 8003e92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	029b      	lsls	r3, r3, #10
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	e050      	b.n	8003f5c <USB_EPStartXfer+0x318>
 8003eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <USB_EPStartXfer+0x294>
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	801a      	strh	r2, [r3, #0]
 8003ed6:	e041      	b.n	8003f5c <USB_EPStartXfer+0x318>
 8003ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <USB_EPStartXfer+0x2b4>
 8003eee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	029b      	lsls	r3, r3, #10
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	801a      	strh	r2, [r3, #0]
 8003f10:	e024      	b.n	8003f5c <USB_EPStartXfer+0x318>
 8003f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	785b      	ldrb	r3, [r3, #1]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d11c      	bne.n	8003f5c <USB_EPStartXfer+0x318>
 8003f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	4413      	add	r3, r2
 8003f38:	633b      	str	r3, [r7, #48]	; 0x30
 8003f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	011a      	lsls	r2, r3, #4
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	895b      	ldrh	r3, [r3, #10]
 8003f68:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6959      	ldr	r1, [r3, #20]
 8003f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003f82:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003f86:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003f8a:	6800      	ldr	r0, [r0, #0]
 8003f8c:	f001 fb49 	bl	8005622 <USB_WritePMA>
            ep->xfer_buff += len;
 8003f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fa0:	441a      	add	r2, r3
 8003fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6a1a      	ldr	r2, [r3, #32]
 8003fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d90f      	bls.n	8003fea <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6a1a      	ldr	r2, [r3, #32]
 8003fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fda:	1ad2      	subs	r2, r2, r3
 8003fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	621a      	str	r2, [r3, #32]
 8003fe8:	e00e      	b.n	8004008 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2200      	movs	r2, #0
 8004006:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800400c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d177      	bne.n	8004108 <USB_EPStartXfer+0x4c4>
 8004018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800401c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004032:	b29b      	uxth	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	4413      	add	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	011a      	lsls	r2, r3, #4
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	4413      	add	r3, r2
 800404e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800405e:	b29a      	uxth	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	801a      	strh	r2, [r3, #0]
 8004064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004068:	2b3e      	cmp	r3, #62	; 0x3e
 800406a:	d921      	bls.n	80040b0 <USB_EPStartXfer+0x46c>
 800406c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <USB_EPStartXfer+0x448>
 8004082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004086:	3b01      	subs	r3, #1
 8004088:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b29a      	uxth	r2, r3
 8004092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004096:	b29b      	uxth	r3, r3
 8004098:	029b      	lsls	r3, r3, #10
 800409a:	b29b      	uxth	r3, r3
 800409c:	4313      	orrs	r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	801a      	strh	r2, [r3, #0]
 80040ae:	e056      	b.n	800415e <USB_EPStartXfer+0x51a>
 80040b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <USB_EPStartXfer+0x48a>
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	801a      	strh	r2, [r3, #0]
 80040cc:	e047      	b.n	800415e <USB_EPStartXfer+0x51a>
 80040ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d004      	beq.n	80040ee <USB_EPStartXfer+0x4aa>
 80040e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e8:	3301      	adds	r3, #1
 80040ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	029b      	lsls	r3, r3, #10
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4313      	orrs	r3, r2
 8004100:	b29a      	uxth	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	e02a      	b.n	800415e <USB_EPStartXfer+0x51a>
 8004108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800410c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	785b      	ldrb	r3, [r3, #1]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d122      	bne.n	800415e <USB_EPStartXfer+0x51a>
 8004118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800411c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	623b      	str	r3, [r7, #32]
 8004124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004128:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004132:	b29b      	uxth	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	4413      	add	r3, r2
 800413a:	623b      	str	r3, [r7, #32]
 800413c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	011a      	lsls	r2, r3, #4
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	4413      	add	r3, r2
 800414e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004158:	b29a      	uxth	r2, r3
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800415e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	891b      	ldrh	r3, [r3, #8]
 800416a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800416e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6959      	ldr	r1, [r3, #20]
 800417a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800417e:	b29b      	uxth	r3, r3
 8004180:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004184:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004188:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800418c:	6800      	ldr	r0, [r0, #0]
 800418e:	f001 fa48 	bl	8005622 <USB_WritePMA>
 8004192:	e3ee      	b.n	8004972 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d177      	bne.n	8004294 <USB_EPStartXfer+0x650>
 80041a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80041b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041be:	b29b      	uxth	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c4:	4413      	add	r3, r2
 80041c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	011a      	lsls	r2, r3, #4
 80041d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d8:	4413      	add	r3, r2
 80041da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041de:	647b      	str	r3, [r7, #68]	; 0x44
 80041e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ee:	801a      	strh	r2, [r3, #0]
 80041f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041f4:	2b3e      	cmp	r3, #62	; 0x3e
 80041f6:	d921      	bls.n	800423c <USB_EPStartXfer+0x5f8>
 80041f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	2b00      	cmp	r3, #0
 800420c:	d104      	bne.n	8004218 <USB_EPStartXfer+0x5d4>
 800420e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004212:	3b01      	subs	r3, #1
 8004214:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	b29a      	uxth	r2, r3
 800421e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004222:	b29b      	uxth	r3, r3
 8004224:	029b      	lsls	r3, r3, #10
 8004226:	b29b      	uxth	r3, r3
 8004228:	4313      	orrs	r3, r2
 800422a:	b29b      	uxth	r3, r3
 800422c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004234:	b29a      	uxth	r2, r3
 8004236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004238:	801a      	strh	r2, [r3, #0]
 800423a:	e056      	b.n	80042ea <USB_EPStartXfer+0x6a6>
 800423c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <USB_EPStartXfer+0x616>
 8004244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	b29b      	uxth	r3, r3
 800424a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800424e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004252:	b29a      	uxth	r2, r3
 8004254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004256:	801a      	strh	r2, [r3, #0]
 8004258:	e047      	b.n	80042ea <USB_EPStartXfer+0x6a6>
 800425a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d004      	beq.n	800427a <USB_EPStartXfer+0x636>
 8004270:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004274:	3301      	adds	r3, #1
 8004276:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800427a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29a      	uxth	r2, r3
 8004280:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004284:	b29b      	uxth	r3, r3
 8004286:	029b      	lsls	r3, r3, #10
 8004288:	b29b      	uxth	r3, r3
 800428a:	4313      	orrs	r3, r2
 800428c:	b29a      	uxth	r2, r3
 800428e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004290:	801a      	strh	r2, [r3, #0]
 8004292:	e02a      	b.n	80042ea <USB_EPStartXfer+0x6a6>
 8004294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	785b      	ldrb	r3, [r3, #1]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d122      	bne.n	80042ea <USB_EPStartXfer+0x6a6>
 80042a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	653b      	str	r3, [r7, #80]	; 0x50
 80042b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042be:	b29b      	uxth	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c4:	4413      	add	r3, r2
 80042c6:	653b      	str	r3, [r7, #80]	; 0x50
 80042c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	011a      	lsls	r2, r3, #4
 80042d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d8:	4413      	add	r3, r2
 80042da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80042ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	891b      	ldrh	r3, [r3, #8]
 80042f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6959      	ldr	r1, [r3, #20]
 8004306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800430a:	b29b      	uxth	r3, r3
 800430c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004310:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004314:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004318:	6800      	ldr	r0, [r0, #0]
 800431a:	f001 f982 	bl	8005622 <USB_WritePMA>
            ep->xfer_buff += len;
 800431e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800432e:	441a      	add	r2, r3
 8004330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800433c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6a1a      	ldr	r2, [r3, #32]
 8004348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800434c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	429a      	cmp	r2, r3
 8004356:	d90f      	bls.n	8004378 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800435c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004368:	1ad2      	subs	r2, r2, r3
 800436a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800436e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	621a      	str	r2, [r3, #32]
 8004376:	e00e      	b.n	8004396 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800437c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800438c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800439a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	643b      	str	r3, [r7, #64]	; 0x40
 80043a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d177      	bne.n	80044a2 <USB_EPStartXfer+0x85e>
 80043b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80043be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	4413      	add	r3, r2
 80043d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80043d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	011a      	lsls	r2, r3, #4
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	4413      	add	r3, r2
 80043e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
 80043ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	801a      	strh	r2, [r3, #0]
 80043fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004402:	2b3e      	cmp	r3, #62	; 0x3e
 8004404:	d921      	bls.n	800444a <USB_EPStartXfer+0x806>
 8004406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <USB_EPStartXfer+0x7e2>
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	3b01      	subs	r3, #1
 8004422:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29a      	uxth	r2, r3
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004430:	b29b      	uxth	r3, r3
 8004432:	029b      	lsls	r3, r3, #10
 8004434:	b29b      	uxth	r3, r3
 8004436:	4313      	orrs	r3, r2
 8004438:	b29b      	uxth	r3, r3
 800443a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004442:	b29a      	uxth	r2, r3
 8004444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	e050      	b.n	80044ec <USB_EPStartXfer+0x8a8>
 800444a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <USB_EPStartXfer+0x824>
 8004452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800445c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004460:	b29a      	uxth	r2, r3
 8004462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004464:	801a      	strh	r2, [r3, #0]
 8004466:	e041      	b.n	80044ec <USB_EPStartXfer+0x8a8>
 8004468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d004      	beq.n	8004488 <USB_EPStartXfer+0x844>
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	3301      	adds	r3, #1
 8004484:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29a      	uxth	r2, r3
 800448e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004492:	b29b      	uxth	r3, r3
 8004494:	029b      	lsls	r3, r3, #10
 8004496:	b29b      	uxth	r3, r3
 8004498:	4313      	orrs	r3, r2
 800449a:	b29a      	uxth	r2, r3
 800449c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449e:	801a      	strh	r2, [r3, #0]
 80044a0:	e024      	b.n	80044ec <USB_EPStartXfer+0x8a8>
 80044a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d11c      	bne.n	80044ec <USB_EPStartXfer+0x8a8>
 80044b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c6:	4413      	add	r3, r2
 80044c8:	643b      	str	r3, [r7, #64]	; 0x40
 80044ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	011a      	lsls	r2, r3, #4
 80044d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044da:	4413      	add	r3, r2
 80044dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80044ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	895b      	ldrh	r3, [r3, #10]
 80044f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6959      	ldr	r1, [r3, #20]
 8004508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800450c:	b29b      	uxth	r3, r3
 800450e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004512:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004516:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800451a:	6800      	ldr	r0, [r0, #0]
 800451c:	f001 f881 	bl	8005622 <USB_WritePMA>
 8004520:	e227      	b.n	8004972 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004558:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800455c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800456a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	441a      	add	r2, r3
 8004576:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800457a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800458e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	65fb      	str	r3, [r7, #92]	; 0x5c
 800459a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800459e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ae:	4413      	add	r3, r2
 80045b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	011a      	lsls	r2, r3, #4
 80045c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c2:	4413      	add	r3, r2
 80045c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80045ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80045d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	891b      	ldrh	r3, [r3, #8]
 80045e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6959      	ldr	r1, [r3, #20]
 80045f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80045fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80045fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004602:	6800      	ldr	r0, [r0, #0]
 8004604:	f001 f80d 	bl	8005622 <USB_WritePMA>
 8004608:	e1b3      	b.n	8004972 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800460a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800460e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6a1a      	ldr	r2, [r3, #32]
 8004616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800461a:	1ad2      	subs	r2, r2, r3
 800461c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800462c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 80c6 	beq.w	80047dc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004654:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	673b      	str	r3, [r7, #112]	; 0x70
 800465c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d177      	bne.n	800475c <USB_EPStartXfer+0xb18>
 800466c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	66bb      	str	r3, [r7, #104]	; 0x68
 8004678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800467c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004686:	b29b      	uxth	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800468c:	4413      	add	r3, r2
 800468e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	011a      	lsls	r2, r3, #4
 800469e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046a0:	4413      	add	r3, r2
 80046a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046a6:	667b      	str	r3, [r7, #100]	; 0x64
 80046a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046b6:	801a      	strh	r2, [r3, #0]
 80046b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046bc:	2b3e      	cmp	r3, #62	; 0x3e
 80046be:	d921      	bls.n	8004704 <USB_EPStartXfer+0xac0>
 80046c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80046ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d104      	bne.n	80046e0 <USB_EPStartXfer+0xa9c>
 80046d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80046da:	3b01      	subs	r3, #1
 80046dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80046e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	029b      	lsls	r3, r3, #10
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	4313      	orrs	r3, r2
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004700:	801a      	strh	r2, [r3, #0]
 8004702:	e050      	b.n	80047a6 <USB_EPStartXfer+0xb62>
 8004704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <USB_EPStartXfer+0xade>
 800470c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800471a:	b29a      	uxth	r2, r3
 800471c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800471e:	801a      	strh	r2, [r3, #0]
 8004720:	e041      	b.n	80047a6 <USB_EPStartXfer+0xb62>
 8004722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004726:	085b      	lsrs	r3, r3, #1
 8004728:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800472c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d004      	beq.n	8004742 <USB_EPStartXfer+0xafe>
 8004738:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800473c:	3301      	adds	r3, #1
 800473e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29a      	uxth	r2, r3
 8004748:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800474c:	b29b      	uxth	r3, r3
 800474e:	029b      	lsls	r3, r3, #10
 8004750:	b29b      	uxth	r3, r3
 8004752:	4313      	orrs	r3, r2
 8004754:	b29a      	uxth	r2, r3
 8004756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004758:	801a      	strh	r2, [r3, #0]
 800475a:	e024      	b.n	80047a6 <USB_EPStartXfer+0xb62>
 800475c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d11c      	bne.n	80047a6 <USB_EPStartXfer+0xb62>
 800476c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004770:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477a:	b29b      	uxth	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004780:	4413      	add	r3, r2
 8004782:	673b      	str	r3, [r7, #112]	; 0x70
 8004784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	011a      	lsls	r2, r3, #4
 8004792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004794:	4413      	add	r3, r2
 8004796:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800479a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800479c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80047a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	895b      	ldrh	r3, [r3, #10]
 80047b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6959      	ldr	r1, [r3, #20]
 80047c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80047cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80047d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80047d4:	6800      	ldr	r0, [r0, #0]
 80047d6:	f000 ff24 	bl	8005622 <USB_WritePMA>
 80047da:	e0ca      	b.n	8004972 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	785b      	ldrb	r3, [r3, #1]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d177      	bne.n	80048dc <USB_EPStartXfer+0xc98>
 80047ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004806:	b29b      	uxth	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800480c:	4413      	add	r3, r2
 800480e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	011a      	lsls	r2, r3, #4
 800481e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004820:	4413      	add	r3, r2
 8004822:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004826:	67bb      	str	r3, [r7, #120]	; 0x78
 8004828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004832:	b29a      	uxth	r2, r3
 8004834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004836:	801a      	strh	r2, [r3, #0]
 8004838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800483c:	2b3e      	cmp	r3, #62	; 0x3e
 800483e:	d921      	bls.n	8004884 <USB_EPStartXfer+0xc40>
 8004840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800484a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	2b00      	cmp	r3, #0
 8004854:	d104      	bne.n	8004860 <USB_EPStartXfer+0xc1c>
 8004856:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800485a:	3b01      	subs	r3, #1
 800485c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29a      	uxth	r2, r3
 8004866:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800486a:	b29b      	uxth	r3, r3
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	b29b      	uxth	r3, r3
 8004870:	4313      	orrs	r3, r2
 8004872:	b29b      	uxth	r3, r3
 8004874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800487c:	b29a      	uxth	r2, r3
 800487e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004880:	801a      	strh	r2, [r3, #0]
 8004882:	e05c      	b.n	800493e <USB_EPStartXfer+0xcfa>
 8004884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <USB_EPStartXfer+0xc5e>
 800488c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489a:	b29a      	uxth	r2, r3
 800489c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	e04d      	b.n	800493e <USB_EPStartXfer+0xcfa>
 80048a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d004      	beq.n	80048c2 <USB_EPStartXfer+0xc7e>
 80048b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048bc:	3301      	adds	r3, #1
 80048be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	029b      	lsls	r3, r3, #10
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	4313      	orrs	r3, r2
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	e030      	b.n	800493e <USB_EPStartXfer+0xcfa>
 80048dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	785b      	ldrb	r3, [r3, #1]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d128      	bne.n	800493e <USB_EPStartXfer+0xcfa>
 80048ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004908:	b29b      	uxth	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004910:	4413      	add	r3, r2
 8004912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800491a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	011a      	lsls	r2, r3, #4
 8004924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004928:	4413      	add	r3, r2
 800492a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800492e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004936:	b29a      	uxth	r2, r3
 8004938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800493c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800493e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	891b      	ldrh	r3, [r3, #8]
 800494a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800494e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6959      	ldr	r1, [r3, #20]
 800495a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800495e:	b29b      	uxth	r3, r3
 8004960:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004964:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004968:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800496c:	6800      	ldr	r0, [r0, #0]
 800496e:	f000 fe58 	bl	8005622 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004998:	817b      	strh	r3, [r7, #10]
 800499a:	897b      	ldrh	r3, [r7, #10]
 800499c:	f083 0310 	eor.w	r3, r3, #16
 80049a0:	817b      	strh	r3, [r7, #10]
 80049a2:	897b      	ldrh	r3, [r7, #10]
 80049a4:	f083 0320 	eor.w	r3, r3, #32
 80049a8:	817b      	strh	r3, [r7, #10]
 80049aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	441a      	add	r2, r3
 80049c4:	897b      	ldrh	r3, [r7, #10]
 80049c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	8013      	strh	r3, [r2, #0]
 80049da:	f000 bcde 	b.w	800539a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80049de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	7b1b      	ldrb	r3, [r3, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f040 80bb 	bne.w	8004b66 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80049f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699a      	ldr	r2, [r3, #24]
 80049fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d917      	bls.n	8004a3c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8004a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699a      	ldr	r2, [r3, #24]
 8004a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a2c:	1ad2      	subs	r2, r2, r3
 8004a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	619a      	str	r2, [r3, #24]
 8004a3a:	e00e      	b.n	8004a5a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8004a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a7e:	4413      	add	r3, r2
 8004a80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	011a      	lsls	r2, r3, #4
 8004a92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a96:	4413      	add	r3, r2
 8004a98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ab2:	801a      	strh	r2, [r3, #0]
 8004ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab8:	2b3e      	cmp	r3, #62	; 0x3e
 8004aba:	d924      	bls.n	8004b06 <USB_EPStartXfer+0xec2>
 8004abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aca:	f003 031f 	and.w	r3, r3, #31
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d104      	bne.n	8004adc <USB_EPStartXfer+0xe98>
 8004ad2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	029b      	lsls	r3, r3, #10
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	4313      	orrs	r3, r2
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b00:	801a      	strh	r2, [r3, #0]
 8004b02:	f000 bc10 	b.w	8005326 <USB_EPStartXfer+0x16e2>
 8004b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10c      	bne.n	8004b28 <USB_EPStartXfer+0xee4>
 8004b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b24:	801a      	strh	r2, [r3, #0]
 8004b26:	e3fe      	b.n	8005326 <USB_EPStartXfer+0x16e2>
 8004b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d004      	beq.n	8004b48 <USB_EPStartXfer+0xf04>
 8004b3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b42:	3301      	adds	r3, #1
 8004b44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	029b      	lsls	r3, r3, #10
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b62:	801a      	strh	r2, [r3, #0]
 8004b64:	e3df      	b.n	8005326 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	78db      	ldrb	r3, [r3, #3]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	f040 8218 	bne.w	8004fa8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	785b      	ldrb	r3, [r3, #1]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f040 809d 	bne.w	8004cc4 <USB_EPStartXfer+0x1080>
 8004b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bae:	4413      	add	r3, r2
 8004bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	011a      	lsls	r2, r3, #4
 8004bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004be2:	801a      	strh	r2, [r3, #0]
 8004be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b3e      	cmp	r3, #62	; 0x3e
 8004bf2:	d92b      	bls.n	8004c4c <USB_EPStartXfer+0x1008>
 8004bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d104      	bne.n	8004c24 <USB_EPStartXfer+0xfe0>
 8004c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	029b      	lsls	r3, r3, #10
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	4313      	orrs	r3, r2
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c48:	801a      	strh	r2, [r3, #0]
 8004c4a:	e070      	b.n	8004d2e <USB_EPStartXfer+0x10ea>
 8004c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10c      	bne.n	8004c76 <USB_EPStartXfer+0x1032>
 8004c5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	e05b      	b.n	8004d2e <USB_EPStartXfer+0x10ea>
 8004c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <USB_EPStartXfer+0x1062>
 8004c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ca6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	029b      	lsls	r3, r3, #10
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cc0:	801a      	strh	r2, [r3, #0]
 8004cc2:	e034      	b.n	8004d2e <USB_EPStartXfer+0x10ea>
 8004cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	785b      	ldrb	r3, [r3, #1]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d12c      	bne.n	8004d2e <USB_EPStartXfer+0x10ea>
 8004cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	011a      	lsls	r2, r3, #4
 8004d0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d10:	4413      	add	r3, r2
 8004d12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d2c:	801a      	strh	r2, [r3, #0]
 8004d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f040 809d 	bne.w	8004e88 <USB_EPStartXfer+0x1244>
 8004d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d72:	4413      	add	r3, r2
 8004d74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	011a      	lsls	r2, r3, #4
 8004d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b3e      	cmp	r3, #62	; 0x3e
 8004db6:	d92b      	bls.n	8004e10 <USB_EPStartXfer+0x11cc>
 8004db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 031f 	and.w	r3, r3, #31
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d104      	bne.n	8004de8 <USB_EPStartXfer+0x11a4>
 8004dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de2:	3b01      	subs	r3, #1
 8004de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	029b      	lsls	r3, r3, #10
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	e069      	b.n	8004ee4 <USB_EPStartXfer+0x12a0>
 8004e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10c      	bne.n	8004e3a <USB_EPStartXfer+0x11f6>
 8004e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e36:	801a      	strh	r2, [r3, #0]
 8004e38:	e054      	b.n	8004ee4 <USB_EPStartXfer+0x12a0>
 8004e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <USB_EPStartXfer+0x1226>
 8004e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e64:	3301      	adds	r3, #1
 8004e66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	029b      	lsls	r3, r3, #10
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	e02d      	b.n	8004ee4 <USB_EPStartXfer+0x12a0>
 8004e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d125      	bne.n	8004ee4 <USB_EPStartXfer+0x12a0>
 8004e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004eae:	4413      	add	r3, r2
 8004eb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	011a      	lsls	r2, r3, #4
 8004ec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ecc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ee2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8218 	beq.w	8005326 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <USB_EPStartXfer+0x12ea>
 8004f22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10d      	bne.n	8004f4a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f040 81f5 	bne.w	8005326 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f040 81ee 	bne.w	8005326 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f70:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	8013      	strh	r3, [r2, #0]
 8004fa6:	e1be      	b.n	8005326 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	78db      	ldrb	r3, [r3, #3]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	f040 81b4 	bne.w	8005322 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d917      	bls.n	8005006 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff6:	1ad2      	subs	r2, r2, r3
 8004ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	619a      	str	r2, [r3, #24]
 8005004:	e00e      	b.n	8005024 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800500a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800501a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2200      	movs	r2, #0
 8005022:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	2b00      	cmp	r3, #0
 8005032:	f040 8085 	bne.w	8005140 <USB_EPStartXfer+0x14fc>
 8005036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800503a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005048:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005052:	b29b      	uxth	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800505a:	4413      	add	r3, r2
 800505c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	011a      	lsls	r2, r3, #4
 800506e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005072:	4413      	add	r3, r2
 8005074:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005078:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800507c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005088:	b29a      	uxth	r2, r3
 800508a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800508e:	801a      	strh	r2, [r3, #0]
 8005090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005094:	2b3e      	cmp	r3, #62	; 0x3e
 8005096:	d923      	bls.n	80050e0 <USB_EPStartXfer+0x149c>
 8005098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80050a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a6:	f003 031f 	and.w	r3, r3, #31
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d104      	bne.n	80050b8 <USB_EPStartXfer+0x1474>
 80050ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050b2:	3b01      	subs	r3, #1
 80050b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80050b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29a      	uxth	r2, r3
 80050c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	029b      	lsls	r3, r3, #10
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	4313      	orrs	r3, r2
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050dc:	801a      	strh	r2, [r3, #0]
 80050de:	e060      	b.n	80051a2 <USB_EPStartXfer+0x155e>
 80050e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10c      	bne.n	8005102 <USB_EPStartXfer+0x14be>
 80050e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050fe:	801a      	strh	r2, [r3, #0]
 8005100:	e04f      	b.n	80051a2 <USB_EPStartXfer+0x155e>
 8005102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005106:	085b      	lsrs	r3, r3, #1
 8005108:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800510c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d004      	beq.n	8005122 <USB_EPStartXfer+0x14de>
 8005118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800511c:	3301      	adds	r3, #1
 800511e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005122:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	b29a      	uxth	r2, r3
 800512a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800512e:	b29b      	uxth	r3, r3
 8005130:	029b      	lsls	r3, r3, #10
 8005132:	b29b      	uxth	r3, r3
 8005134:	4313      	orrs	r3, r2
 8005136:	b29a      	uxth	r2, r3
 8005138:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800513c:	801a      	strh	r2, [r3, #0]
 800513e:	e030      	b.n	80051a2 <USB_EPStartXfer+0x155e>
 8005140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d128      	bne.n	80051a2 <USB_EPStartXfer+0x155e>
 8005150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800515e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516c:	b29b      	uxth	r3, r3
 800516e:	461a      	mov	r2, r3
 8005170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005174:	4413      	add	r3, r2
 8005176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800517a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	011a      	lsls	r2, r3, #4
 8005188:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800518c:	4413      	add	r3, r2
 800518e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005192:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800519a:	b29a      	uxth	r2, r3
 800519c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80051a0:	801a      	strh	r2, [r3, #0]
 80051a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f040 8085 	bne.w	80052cc <USB_EPStartXfer+0x1688>
 80051c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80051d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051de:	b29b      	uxth	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051e6:	4413      	add	r3, r2
 80051e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80051ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	011a      	lsls	r2, r3, #4
 80051fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051fe:	4413      	add	r3, r2
 8005200:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005204:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005208:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005214:	b29a      	uxth	r2, r3
 8005216:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800521a:	801a      	strh	r2, [r3, #0]
 800521c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005220:	2b3e      	cmp	r3, #62	; 0x3e
 8005222:	d923      	bls.n	800526c <USB_EPStartXfer+0x1628>
 8005224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800522e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005232:	f003 031f 	and.w	r3, r3, #31
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <USB_EPStartXfer+0x1600>
 800523a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800523e:	3b01      	subs	r3, #1
 8005240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005244:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b29a      	uxth	r2, r3
 800524c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005250:	b29b      	uxth	r3, r3
 8005252:	029b      	lsls	r3, r3, #10
 8005254:	b29b      	uxth	r3, r3
 8005256:	4313      	orrs	r3, r2
 8005258:	b29b      	uxth	r3, r3
 800525a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005262:	b29a      	uxth	r2, r3
 8005264:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005268:	801a      	strh	r2, [r3, #0]
 800526a:	e05c      	b.n	8005326 <USB_EPStartXfer+0x16e2>
 800526c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10c      	bne.n	800528e <USB_EPStartXfer+0x164a>
 8005274:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005284:	b29a      	uxth	r2, r3
 8005286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800528a:	801a      	strh	r2, [r3, #0]
 800528c:	e04b      	b.n	8005326 <USB_EPStartXfer+0x16e2>
 800528e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <USB_EPStartXfer+0x166a>
 80052a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052a8:	3301      	adds	r3, #1
 80052aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	029b      	lsls	r3, r3, #10
 80052be:	b29b      	uxth	r3, r3
 80052c0:	4313      	orrs	r3, r2
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	e02c      	b.n	8005326 <USB_EPStartXfer+0x16e2>
 80052cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	785b      	ldrb	r3, [r3, #1]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d124      	bne.n	8005326 <USB_EPStartXfer+0x16e2>
 80052dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052f2:	4413      	add	r3, r2
 80052f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	011a      	lsls	r2, r3, #4
 8005306:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800530a:	4413      	add	r3, r2
 800530c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005318:	b29a      	uxth	r2, r3
 800531a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800531e:	801a      	strh	r2, [r3, #0]
 8005320:	e001      	b.n	8005326 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e03a      	b.n	800539c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005350:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005354:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005358:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800535c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005360:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005364:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005396:	b29b      	uxth	r3, r3
 8005398:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	785b      	ldrb	r3, [r3, #1]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d020      	beq.n	80053fa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ce:	81bb      	strh	r3, [r7, #12]
 80053d0:	89bb      	ldrh	r3, [r7, #12]
 80053d2:	f083 0310 	eor.w	r3, r3, #16
 80053d6:	81bb      	strh	r3, [r7, #12]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	441a      	add	r2, r3
 80053e2:	89bb      	ldrh	r3, [r7, #12]
 80053e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	8013      	strh	r3, [r2, #0]
 80053f8:	e01f      	b.n	800543a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800540c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005410:	81fb      	strh	r3, [r7, #14]
 8005412:	89fb      	ldrh	r3, [r7, #14]
 8005414:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005418:	81fb      	strh	r3, [r7, #14]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	441a      	add	r2, r3
 8005424:	89fb      	ldrh	r3, [r7, #14]
 8005426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005436:	b29b      	uxth	r3, r3
 8005438:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr

08005446 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005446:	b480      	push	{r7}
 8005448:	b087      	sub	sp, #28
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	7b1b      	ldrb	r3, [r3, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f040 809d 	bne.w	8005594 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	785b      	ldrb	r3, [r3, #1]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d04c      	beq.n	80054fc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	823b      	strh	r3, [r7, #16]
 8005470:	8a3b      	ldrh	r3, [r7, #16]
 8005472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01b      	beq.n	80054b2 <USB_EPClearStall+0x6c>
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800548c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005490:	81fb      	strh	r3, [r7, #14]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	441a      	add	r2, r3
 800549c:	89fb      	ldrh	r3, [r7, #14]
 800549e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	78db      	ldrb	r3, [r3, #3]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d06c      	beq.n	8005594 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d0:	81bb      	strh	r3, [r7, #12]
 80054d2:	89bb      	ldrh	r3, [r7, #12]
 80054d4:	f083 0320 	eor.w	r3, r3, #32
 80054d8:	81bb      	strh	r3, [r7, #12]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	441a      	add	r2, r3
 80054e4:	89bb      	ldrh	r3, [r7, #12]
 80054e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	8013      	strh	r3, [r2, #0]
 80054fa:	e04b      	b.n	8005594 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	82fb      	strh	r3, [r7, #22]
 800550a:	8afb      	ldrh	r3, [r7, #22]
 800550c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01b      	beq.n	800554c <USB_EPClearStall+0x106>
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	82bb      	strh	r3, [r7, #20]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	441a      	add	r2, r3
 8005536:	8abb      	ldrh	r3, [r7, #20]
 8005538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005548:	b29b      	uxth	r3, r3
 800554a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005562:	827b      	strh	r3, [r7, #18]
 8005564:	8a7b      	ldrh	r3, [r7, #18]
 8005566:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800556a:	827b      	strh	r3, [r7, #18]
 800556c:	8a7b      	ldrh	r3, [r7, #18]
 800556e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005572:	827b      	strh	r3, [r7, #18]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	441a      	add	r2, r3
 800557e:	8a7b      	ldrh	r3, [r7, #18]
 8005580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	bc80      	pop	{r7}
 800559e:	4770      	bx	lr

080055a0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d103      	bne.n	80055ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2280      	movs	r2, #128	; 0x80
 80055b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr

080055c6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr

080055da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr

080055ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005600:	68fb      	ldr	r3, [r7, #12]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005622:	b480      	push	{r7}
 8005624:	b08b      	sub	sp, #44	; 0x2c
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	4611      	mov	r1, r2
 800562e:	461a      	mov	r2, r3
 8005630:	460b      	mov	r3, r1
 8005632:	80fb      	strh	r3, [r7, #6]
 8005634:	4613      	mov	r3, r2
 8005636:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005638:	88bb      	ldrh	r3, [r7, #4]
 800563a:	3301      	adds	r3, #1
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005648:	88fb      	ldrh	r3, [r7, #6]
 800564a:	005a      	lsls	r2, r3, #1
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005654:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
 800565a:	e01e      	b.n	800569a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	3301      	adds	r3, #1
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	b21a      	sxth	r2, r3
 800566c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005670:	4313      	orrs	r3, r2
 8005672:	b21b      	sxth	r3, r3
 8005674:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	8a7a      	ldrh	r2, [r7, #18]
 800567a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	3302      	adds	r3, #2
 8005680:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	3302      	adds	r3, #2
 8005686:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	3301      	adds	r3, #1
 800568c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3301      	adds	r3, #1
 8005692:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	3b01      	subs	r3, #1
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1dd      	bne.n	800565c <USB_WritePMA+0x3a>
  }
}
 80056a0:	bf00      	nop
 80056a2:	bf00      	nop
 80056a4:	372c      	adds	r7, #44	; 0x2c
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b08b      	sub	sp, #44	; 0x2c
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	4611      	mov	r1, r2
 80056b8:	461a      	mov	r2, r3
 80056ba:	460b      	mov	r3, r1
 80056bc:	80fb      	strh	r3, [r7, #6]
 80056be:	4613      	mov	r3, r2
 80056c0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80056c2:	88bb      	ldrh	r3, [r7, #4]
 80056c4:	085b      	lsrs	r3, r3, #1
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056d2:	88fb      	ldrh	r3, [r7, #6]
 80056d4:	005a      	lsls	r2, r3, #1
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056de:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
 80056e4:	e01b      	b.n	800571e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	3302      	adds	r3, #2
 80056f2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	3301      	adds	r3, #1
 8005700:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	0a1b      	lsrs	r3, r3, #8
 8005706:	b2da      	uxtb	r2, r3
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	3301      	adds	r3, #1
 8005710:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	3302      	adds	r3, #2
 8005716:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	3b01      	subs	r3, #1
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e0      	bne.n	80056e6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005724:	88bb      	ldrh	r3, [r7, #4]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	b29b      	uxth	r3, r3
 8005736:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	b2da      	uxtb	r2, r3
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	701a      	strb	r2, [r3, #0]
  }
}
 8005740:	bf00      	nop
 8005742:	372c      	adds	r7, #44	; 0x2c
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	460b      	mov	r3, r1
 8005754:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	7c1b      	ldrb	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d115      	bne.n	800578e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005766:	2202      	movs	r2, #2
 8005768:	2181      	movs	r1, #129	; 0x81
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f001 ff1d 	bl	80075aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800577a:	2202      	movs	r2, #2
 800577c:	2101      	movs	r1, #1
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f001 ff13 	bl	80075aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800578c:	e012      	b.n	80057b4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800578e:	2340      	movs	r3, #64	; 0x40
 8005790:	2202      	movs	r2, #2
 8005792:	2181      	movs	r1, #129	; 0x81
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 ff08 	bl	80075aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057a0:	2340      	movs	r3, #64	; 0x40
 80057a2:	2202      	movs	r2, #2
 80057a4:	2101      	movs	r1, #1
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f001 feff 	bl	80075aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057b4:	2308      	movs	r3, #8
 80057b6:	2203      	movs	r2, #3
 80057b8:	2182      	movs	r1, #130	; 0x82
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f001 fef5 	bl	80075aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057c6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057ca:	f002 f815 	bl	80077f8 <USBD_static_malloc>
 80057ce:	4602      	mov	r2, r0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80057e0:	2301      	movs	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
 80057e4:	e026      	b.n	8005834 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ec:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	7c1b      	ldrb	r3, [r3, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d109      	bne.n	8005824 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800581a:	2101      	movs	r1, #1
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 ffb5 	bl	800778c <USBD_LL_PrepareReceive>
 8005822:	e007      	b.n	8005834 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800582a:	2340      	movs	r3, #64	; 0x40
 800582c:	2101      	movs	r1, #1
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f001 ffac 	bl	800778c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800584e:	2181      	movs	r1, #129	; 0x81
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 fed0 	bl	80075f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800585c:	2101      	movs	r1, #1
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f001 fec9 	bl	80075f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800586c:	2182      	movs	r1, #130	; 0x82
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 fec1 	bl	80075f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00e      	beq.n	80058a2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005894:	4618      	mov	r0, r3
 8005896:	f001 ffbb 	bl	8007810 <USBD_static_free>
    pdev->pClassData = NULL;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058bc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d039      	beq.n	800594a <USBD_CDC_Setup+0x9e>
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d17f      	bne.n	80059da <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	88db      	ldrh	r3, [r3, #6]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d029      	beq.n	8005936 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	b25b      	sxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	da11      	bge.n	8005910 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80058f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	88d2      	ldrh	r2, [r2, #6]
 80058fe:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005900:	6939      	ldr	r1, [r7, #16]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	88db      	ldrh	r3, [r3, #6]
 8005906:	461a      	mov	r2, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f001 fa0a 	bl	8006d22 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800590e:	e06b      	b.n	80059e8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	785a      	ldrb	r2, [r3, #1]
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	88db      	ldrh	r3, [r3, #6]
 800591e:	b2da      	uxtb	r2, r3
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005926:	6939      	ldr	r1, [r7, #16]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	88db      	ldrh	r3, [r3, #6]
 800592c:	461a      	mov	r2, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f001 fa25 	bl	8006d7e <USBD_CtlPrepareRx>
      break;
 8005934:	e058      	b.n	80059e8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	7850      	ldrb	r0, [r2, #1]
 8005942:	2200      	movs	r2, #0
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	4798      	blx	r3
      break;
 8005948:	e04e      	b.n	80059e8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	2b0b      	cmp	r3, #11
 8005950:	d02e      	beq.n	80059b0 <USBD_CDC_Setup+0x104>
 8005952:	2b0b      	cmp	r3, #11
 8005954:	dc38      	bgt.n	80059c8 <USBD_CDC_Setup+0x11c>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <USBD_CDC_Setup+0xb4>
 800595a:	2b0a      	cmp	r3, #10
 800595c:	d014      	beq.n	8005988 <USBD_CDC_Setup+0xdc>
 800595e:	e033      	b.n	80059c8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005966:	2b03      	cmp	r3, #3
 8005968:	d107      	bne.n	800597a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800596a:	f107 030c 	add.w	r3, r7, #12
 800596e:	2202      	movs	r2, #2
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 f9d5 	bl	8006d22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005978:	e02e      	b.n	80059d8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f001 f966 	bl	8006c4e <USBD_CtlError>
            ret = USBD_FAIL;
 8005982:	2302      	movs	r3, #2
 8005984:	75fb      	strb	r3, [r7, #23]
          break;
 8005986:	e027      	b.n	80059d8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800598e:	2b03      	cmp	r3, #3
 8005990:	d107      	bne.n	80059a2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005992:	f107 030f 	add.w	r3, r7, #15
 8005996:	2201      	movs	r2, #1
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 f9c1 	bl	8006d22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059a0:	e01a      	b.n	80059d8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f001 f952 	bl	8006c4e <USBD_CtlError>
            ret = USBD_FAIL;
 80059aa:	2302      	movs	r3, #2
 80059ac:	75fb      	strb	r3, [r7, #23]
          break;
 80059ae:	e013      	b.n	80059d8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d00d      	beq.n	80059d6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 f946 	bl	8006c4e <USBD_CtlError>
            ret = USBD_FAIL;
 80059c2:	2302      	movs	r3, #2
 80059c4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80059c6:	e006      	b.n	80059d6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 f93f 	bl	8006c4e <USBD_CtlError>
          ret = USBD_FAIL;
 80059d0:	2302      	movs	r3, #2
 80059d2:	75fb      	strb	r3, [r7, #23]
          break;
 80059d4:	e000      	b.n	80059d8 <USBD_CDC_Setup+0x12c>
          break;
 80059d6:	bf00      	nop
      }
      break;
 80059d8:	e006      	b.n	80059e8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 f936 	bl	8006c4e <USBD_CtlError>
      ret = USBD_FAIL;
 80059e2:	2302      	movs	r3, #2
 80059e4:	75fb      	strb	r3, [r7, #23]
      break;
 80059e6:	bf00      	nop
  }

  return ret;
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	460b      	mov	r3, r1
 80059fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a04:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a0c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d03a      	beq.n	8005a8e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a18:	78fa      	ldrb	r2, [r7, #3]
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	331c      	adds	r3, #28
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d029      	beq.n	8005a82 <USBD_CDC_DataIn+0x90>
 8005a2e:	78fa      	ldrb	r2, [r7, #3]
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	331c      	adds	r3, #28
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	78f9      	ldrb	r1, [r7, #3]
 8005a42:	68b8      	ldr	r0, [r7, #8]
 8005a44:	460b      	mov	r3, r1
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4403      	add	r3, r0
 8005a4e:	3338      	adds	r3, #56	; 0x38
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a56:	fb01 f303 	mul.w	r3, r1, r3
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d110      	bne.n	8005a82 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005a60:	78fa      	ldrb	r2, [r7, #3]
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	331c      	adds	r3, #28
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a74:	78f9      	ldrb	r1, [r7, #3]
 8005a76:	2300      	movs	r3, #0
 8005a78:	2200      	movs	r2, #0
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f001 fe63 	bl	8007746 <USBD_LL_Transmit>
 8005a80:	e003      	b.n	8005a8a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e000      	b.n	8005a90 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005a8e:	2302      	movs	r3, #2
  }
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 fe8e 	bl	80077d2 <USBD_LL_GetRxDataSize>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00d      	beq.n	8005ae4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005adc:	4611      	mov	r1, r2
 8005ade:	4798      	blx	r3

    return USBD_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e000      	b.n	8005ae6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005ae4:	2302      	movs	r3, #2
  }
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d015      	beq.n	8005b34 <USBD_CDC_EP0_RxReady+0x46>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b0e:	2bff      	cmp	r3, #255	; 0xff
 8005b10:	d010      	beq.n	8005b34 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005b20:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b28:	b292      	uxth	r2, r2
 8005b2a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	22ff      	movs	r2, #255	; 0xff
 8005b30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2243      	movs	r2, #67	; 0x43
 8005b4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005b4e:	4b03      	ldr	r3, [pc, #12]	; (8005b5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	2000009c 	.word	0x2000009c

08005b60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2243      	movs	r2, #67	; 0x43
 8005b6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005b6e:	4b03      	ldr	r3, [pc, #12]	; (8005b7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	20000058 	.word	0x20000058

08005b80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2243      	movs	r2, #67	; 0x43
 8005b8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005b8e:	4b03      	ldr	r3, [pc, #12]	; (8005b9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	200000e0 	.word	0x200000e0

08005ba0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	220a      	movs	r2, #10
 8005bac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005bae:	4b03      	ldr	r3, [pc, #12]	; (8005bbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	20000014 	.word	0x20000014

08005bc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr

08005bec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c00:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr

08005c1e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c2e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr

08005c44 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d01c      	beq.n	8005c98 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d115      	bne.n	8005c94 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2181      	movs	r1, #129	; 0x81
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 fd5b 	bl	8007746 <USBD_LL_Transmit>

      return USBD_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e002      	b.n	8005c9a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005c98:	2302      	movs	r3, #2
  }
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d017      	beq.n	8005cec <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	7c1b      	ldrb	r3, [r3, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d109      	bne.n	8005cd8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cce:	2101      	movs	r1, #1
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f001 fd5b 	bl	800778c <USBD_LL_PrepareReceive>
 8005cd6:	e007      	b.n	8005ce8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cde:	2340      	movs	r3, #64	; 0x40
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 fd52 	bl	800778c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e000      	b.n	8005cee <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005cec:	2302      	movs	r3, #2
  }
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	4613      	mov	r3, r2
 8005d02:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e01a      	b.n	8005d44 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	79fa      	ldrb	r2, [r7, #7]
 8005d3a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f001 fbbf 	bl	80074c0 <USBD_LL_Init>

  return USBD_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d006      	beq.n	8005d6e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	73fb      	strb	r3, [r7, #15]
 8005d6c:	e001      	b.n	8005d72 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr

08005d7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 fbf4 	bl	8007574 <USBD_LL_Start>

  return USBD_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bc80      	pop	{r7}
 8005da8:	4770      	bx	lr

08005daa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	460b      	mov	r3, r1
 8005db4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005db6:	2302      	movs	r3, #2
 8005db8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00c      	beq.n	8005dde <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	78fa      	ldrb	r2, [r7, #3]
 8005dce:	4611      	mov	r1, r2
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	78fa      	ldrb	r2, [r7, #3]
 8005dfe:	4611      	mov	r1, r2
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4798      	blx	r3

  return USBD_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fed8 	bl	8006bd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e34:	461a      	mov	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d016      	beq.n	8005e78 <USBD_LL_SetupStage+0x6a>
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d81c      	bhi.n	8005e88 <USBD_LL_SetupStage+0x7a>
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <USBD_LL_SetupStage+0x4a>
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d008      	beq.n	8005e68 <USBD_LL_SetupStage+0x5a>
 8005e56:	e017      	b.n	8005e88 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f9cb 	bl	80061fc <USBD_StdDevReq>
      break;
 8005e66:	e01a      	b.n	8005e9e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fa2d 	bl	80062d0 <USBD_StdItfReq>
      break;
 8005e76:	e012      	b.n	8005e9e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fa6d 	bl	8006360 <USBD_StdEPReq>
      break;
 8005e86:	e00a      	b.n	8005e9e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 fbcc 	bl	8007634 <USBD_LL_StallEP>
      break;
 8005e9c:	bf00      	nop
  }

  return USBD_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005eb6:	7afb      	ldrb	r3, [r7, #11]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d14b      	bne.n	8005f54 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ec2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d134      	bne.n	8005f38 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d919      	bls.n	8005f0e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	1ad2      	subs	r2, r2, r3
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d203      	bcs.n	8005efc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	e002      	b.n	8005f02 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 ff57 	bl	8006dba <USBD_CtlContinueRx>
 8005f0c:	e038      	b.n	8005f80 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d105      	bne.n	8005f30 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 ff54 	bl	8006dde <USBD_CtlSendStatus>
 8005f36:	e023      	b.n	8005f80 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f3e:	2b05      	cmp	r3, #5
 8005f40:	d11e      	bne.n	8005f80 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f001 fb71 	bl	8007634 <USBD_LL_StallEP>
 8005f52:	e015      	b.n	8005f80 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00d      	beq.n	8005f7c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d108      	bne.n	8005f7c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	7afa      	ldrb	r2, [r7, #11]
 8005f74:	4611      	mov	r1, r2
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	4798      	blx	r3
 8005f7a:	e001      	b.n	8005f80 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e000      	b.n	8005f82 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b086      	sub	sp, #24
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	460b      	mov	r3, r1
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f98:	7afb      	ldrb	r3, [r7, #11]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d17f      	bne.n	800609e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3314      	adds	r3, #20
 8005fa2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d15c      	bne.n	8006068 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d915      	bls.n	8005fe6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	1ad2      	subs	r2, r2, r3
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 fec1 	bl	8006d5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2100      	movs	r1, #0
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f001 fbd4 	bl	800778c <USBD_LL_PrepareReceive>
 8005fe4:	e04e      	b.n	8006084 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	6912      	ldr	r2, [r2, #16]
 8005fee:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ff2:	fb01 f202 	mul.w	r2, r1, r2
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d11c      	bne.n	8006036 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006004:	429a      	cmp	r2, r3
 8006006:	d316      	bcc.n	8006036 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006012:	429a      	cmp	r2, r3
 8006014:	d20f      	bcs.n	8006036 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006016:	2200      	movs	r2, #0
 8006018:	2100      	movs	r1, #0
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 fe9d 	bl	8006d5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006028:	2300      	movs	r3, #0
 800602a:	2200      	movs	r2, #0
 800602c:	2100      	movs	r1, #0
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f001 fbac 	bl	800778c <USBD_LL_PrepareReceive>
 8006034:	e026      	b.n	8006084 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006048:	2b03      	cmp	r3, #3
 800604a:	d105      	bne.n	8006058 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006058:	2180      	movs	r1, #128	; 0x80
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f001 faea 	bl	8007634 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 fecf 	bl	8006e04 <USBD_CtlReceiveStatus>
 8006066:	e00d      	b.n	8006084 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800606e:	2b04      	cmp	r3, #4
 8006070:	d004      	beq.n	800607c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800607c:	2180      	movs	r1, #128	; 0x80
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f001 fad8 	bl	8007634 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800608a:	2b01      	cmp	r3, #1
 800608c:	d11d      	bne.n	80060ca <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff fe81 	bl	8005d96 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800609c:	e015      	b.n	80060ca <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00d      	beq.n	80060c6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d108      	bne.n	80060c6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	7afa      	ldrb	r2, [r7, #11]
 80060be:	4611      	mov	r1, r2
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	4798      	blx	r3
 80060c4:	e001      	b.n	80060ca <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060c6:	2302      	movs	r3, #2
 80060c8:	e000      	b.n	80060cc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060dc:	2340      	movs	r3, #64	; 0x40
 80060de:	2200      	movs	r2, #0
 80060e0:	2100      	movs	r1, #0
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 fa61 	bl	80075aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2240      	movs	r2, #64	; 0x40
 80060f4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060f8:	2340      	movs	r3, #64	; 0x40
 80060fa:	2200      	movs	r2, #0
 80060fc:	2180      	movs	r1, #128	; 0x80
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 fa53 	bl	80075aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2240      	movs	r2, #64	; 0x40
 800610e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d009      	beq.n	800614c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6852      	ldr	r2, [r2, #4]
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	4611      	mov	r1, r2
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
  }

  return USBD_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	460b      	mov	r3, r1
 8006160:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr

08006174 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2204      	movs	r2, #4
 800618c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr

0800619c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d105      	bne.n	80061ba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d10b      	bne.n	80061f0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d005      	beq.n	8006222 <USBD_StdDevReq+0x26>
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	d84f      	bhi.n	80062ba <USBD_StdDevReq+0xbe>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <USBD_StdDevReq+0x36>
 800621e:	2b20      	cmp	r3, #32
 8006220:	d14b      	bne.n	80062ba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	4798      	blx	r3
      break;
 8006230:	e048      	b.n	80062c4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	2b09      	cmp	r3, #9
 8006238:	d839      	bhi.n	80062ae <USBD_StdDevReq+0xb2>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <USBD_StdDevReq+0x44>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	08006291 	.word	0x08006291
 8006244:	080062a5 	.word	0x080062a5
 8006248:	080062af 	.word	0x080062af
 800624c:	0800629b 	.word	0x0800629b
 8006250:	080062af 	.word	0x080062af
 8006254:	08006273 	.word	0x08006273
 8006258:	08006269 	.word	0x08006269
 800625c:	080062af 	.word	0x080062af
 8006260:	08006287 	.word	0x08006287
 8006264:	0800627d 	.word	0x0800627d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f9dc 	bl	8006628 <USBD_GetDescriptor>
          break;
 8006270:	e022      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fb3f 	bl	80068f8 <USBD_SetAddress>
          break;
 800627a:	e01d      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fb7e 	bl	8006980 <USBD_SetConfig>
          break;
 8006284:	e018      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fc07 	bl	8006a9c <USBD_GetConfig>
          break;
 800628e:	e013      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fc37 	bl	8006b06 <USBD_GetStatus>
          break;
 8006298:	e00e      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fc65 	bl	8006b6c <USBD_SetFeature>
          break;
 80062a2:	e009      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fc74 	bl	8006b94 <USBD_ClrFeature>
          break;
 80062ac:	e004      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fccc 	bl	8006c4e <USBD_CtlError>
          break;
 80062b6:	bf00      	nop
      }
      break;
 80062b8:	e004      	b.n	80062c4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fcc6 	bl	8006c4e <USBD_CtlError>
      break;
 80062c2:	bf00      	nop
  }

  return ret;
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop

080062d0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062e6:	2b40      	cmp	r3, #64	; 0x40
 80062e8:	d005      	beq.n	80062f6 <USBD_StdItfReq+0x26>
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d82e      	bhi.n	800634c <USBD_StdItfReq+0x7c>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <USBD_StdItfReq+0x26>
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	d12a      	bne.n	800634c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fc:	3b01      	subs	r3, #1
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d81d      	bhi.n	800633e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	889b      	ldrh	r3, [r3, #4]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b01      	cmp	r3, #1
 800630a:	d813      	bhi.n	8006334 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
 800631a:	4603      	mov	r3, r0
 800631c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	88db      	ldrh	r3, [r3, #6]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d110      	bne.n	8006348 <USBD_StdItfReq+0x78>
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10d      	bne.n	8006348 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fd56 	bl	8006dde <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006332:	e009      	b.n	8006348 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fc89 	bl	8006c4e <USBD_CtlError>
          break;
 800633c:	e004      	b.n	8006348 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fc84 	bl	8006c4e <USBD_CtlError>
          break;
 8006346:	e000      	b.n	800634a <USBD_StdItfReq+0x7a>
          break;
 8006348:	bf00      	nop
      }
      break;
 800634a:	e004      	b.n	8006356 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fc7d 	bl	8006c4e <USBD_CtlError>
      break;
 8006354:	bf00      	nop
  }

  return USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	889b      	ldrh	r3, [r3, #4]
 8006372:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d007      	beq.n	8006390 <USBD_StdEPReq+0x30>
 8006380:	2b40      	cmp	r3, #64	; 0x40
 8006382:	f200 8146 	bhi.w	8006612 <USBD_StdEPReq+0x2b2>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <USBD_StdEPReq+0x40>
 800638a:	2b20      	cmp	r3, #32
 800638c:	f040 8141 	bne.w	8006612 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
      break;
 800639e:	e13d      	b.n	800661c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d10a      	bne.n	80063c2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
 80063ba:	4603      	mov	r3, r0
 80063bc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	e12d      	b.n	800661e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	785b      	ldrb	r3, [r3, #1]
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d007      	beq.n	80063da <USBD_StdEPReq+0x7a>
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	f300 811b 	bgt.w	8006606 <USBD_StdEPReq+0x2a6>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d072      	beq.n	80064ba <USBD_StdEPReq+0x15a>
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d03a      	beq.n	800644e <USBD_StdEPReq+0xee>
 80063d8:	e115      	b.n	8006606 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d002      	beq.n	80063ea <USBD_StdEPReq+0x8a>
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d015      	beq.n	8006414 <USBD_StdEPReq+0xb4>
 80063e8:	e02b      	b.n	8006442 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063ea:	7bbb      	ldrb	r3, [r7, #14]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00c      	beq.n	800640a <USBD_StdEPReq+0xaa>
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	2b80      	cmp	r3, #128	; 0x80
 80063f4:	d009      	beq.n	800640a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063f6:	7bbb      	ldrb	r3, [r7, #14]
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f001 f91a 	bl	8007634 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006400:	2180      	movs	r1, #128	; 0x80
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 f916 	bl	8007634 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006408:	e020      	b.n	800644c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fc1e 	bl	8006c4e <USBD_CtlError>
              break;
 8006412:	e01b      	b.n	800644c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	885b      	ldrh	r3, [r3, #2]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10e      	bne.n	800643a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00b      	beq.n	800643a <USBD_StdEPReq+0xda>
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	2b80      	cmp	r3, #128	; 0x80
 8006426:	d008      	beq.n	800643a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	88db      	ldrh	r3, [r3, #6]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 f8fd 	bl	8007634 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fccf 	bl	8006dde <USBD_CtlSendStatus>

              break;
 8006440:	e004      	b.n	800644c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fc02 	bl	8006c4e <USBD_CtlError>
              break;
 800644a:	bf00      	nop
          }
          break;
 800644c:	e0e0      	b.n	8006610 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006454:	2b02      	cmp	r3, #2
 8006456:	d002      	beq.n	800645e <USBD_StdEPReq+0xfe>
 8006458:	2b03      	cmp	r3, #3
 800645a:	d015      	beq.n	8006488 <USBD_StdEPReq+0x128>
 800645c:	e026      	b.n	80064ac <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00c      	beq.n	800647e <USBD_StdEPReq+0x11e>
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	2b80      	cmp	r3, #128	; 0x80
 8006468:	d009      	beq.n	800647e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 f8e0 	bl	8007634 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006474:	2180      	movs	r1, #128	; 0x80
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 f8dc 	bl	8007634 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800647c:	e01c      	b.n	80064b8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fbe4 	bl	8006c4e <USBD_CtlError>
              break;
 8006486:	e017      	b.n	80064b8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	885b      	ldrh	r3, [r3, #2]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d112      	bne.n	80064b6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006496:	2b00      	cmp	r3, #0
 8006498:	d004      	beq.n	80064a4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 f8e7 	bl	8007672 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fc9a 	bl	8006dde <USBD_CtlSendStatus>
              }
              break;
 80064aa:	e004      	b.n	80064b6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fbcd 	bl	8006c4e <USBD_CtlError>
              break;
 80064b4:	e000      	b.n	80064b8 <USBD_StdEPReq+0x158>
              break;
 80064b6:	bf00      	nop
          }
          break;
 80064b8:	e0aa      	b.n	8006610 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d002      	beq.n	80064ca <USBD_StdEPReq+0x16a>
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d032      	beq.n	800652e <USBD_StdEPReq+0x1ce>
 80064c8:	e097      	b.n	80065fa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d007      	beq.n	80064e0 <USBD_StdEPReq+0x180>
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	2b80      	cmp	r3, #128	; 0x80
 80064d4:	d004      	beq.n	80064e0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fbb8 	bl	8006c4e <USBD_CtlError>
                break;
 80064de:	e091      	b.n	8006604 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	da0b      	bge.n	8006500 <USBD_StdEPReq+0x1a0>
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	3310      	adds	r3, #16
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	4413      	add	r3, r2
 80064fc:	3304      	adds	r3, #4
 80064fe:	e00b      	b.n	8006518 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006506:	4613      	mov	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	4413      	add	r3, r2
 8006516:	3304      	adds	r3, #4
 8006518:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2202      	movs	r2, #2
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fbfb 	bl	8006d22 <USBD_CtlSendData>
              break;
 800652c:	e06a      	b.n	8006604 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800652e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006532:	2b00      	cmp	r3, #0
 8006534:	da11      	bge.n	800655a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006536:	7bbb      	ldrb	r3, [r7, #14]
 8006538:	f003 020f 	and.w	r2, r3, #15
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	3318      	adds	r3, #24
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d117      	bne.n	8006580 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fb7b 	bl	8006c4e <USBD_CtlError>
                  break;
 8006558:	e054      	b.n	8006604 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	f003 020f 	and.w	r2, r3, #15
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	440b      	add	r3, r1
 800656c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fb68 	bl	8006c4e <USBD_CtlError>
                  break;
 800657e:	e041      	b.n	8006604 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006584:	2b00      	cmp	r3, #0
 8006586:	da0b      	bge.n	80065a0 <USBD_StdEPReq+0x240>
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800658e:	4613      	mov	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	3310      	adds	r3, #16
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	4413      	add	r3, r2
 800659c:	3304      	adds	r3, #4
 800659e:	e00b      	b.n	80065b8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
 80065a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065a6:	4613      	mov	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	4413      	add	r3, r2
 80065b6:	3304      	adds	r3, #4
 80065b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <USBD_StdEPReq+0x266>
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
 80065c2:	2b80      	cmp	r3, #128	; 0x80
 80065c4:	d103      	bne.n	80065ce <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	e00e      	b.n	80065ec <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 f86c 	bl	80076b0 <USBD_LL_IsStallEP>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2201      	movs	r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	e002      	b.n	80065ec <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2202      	movs	r2, #2
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fb95 	bl	8006d22 <USBD_CtlSendData>
              break;
 80065f8:	e004      	b.n	8006604 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fb26 	bl	8006c4e <USBD_CtlError>
              break;
 8006602:	bf00      	nop
          }
          break;
 8006604:	e004      	b.n	8006610 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fb20 	bl	8006c4e <USBD_CtlError>
          break;
 800660e:	bf00      	nop
      }
      break;
 8006610:	e004      	b.n	800661c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fb1a 	bl	8006c4e <USBD_CtlError>
      break;
 800661a:	bf00      	nop
  }

  return ret;
 800661c:	7bfb      	ldrb	r3, [r7, #15]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	885b      	ldrh	r3, [r3, #2]
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	2b06      	cmp	r3, #6
 800664a:	f200 8128 	bhi.w	800689e <USBD_GetDescriptor+0x276>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <USBD_GetDescriptor+0x2c>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	08006671 	.word	0x08006671
 8006658:	08006689 	.word	0x08006689
 800665c:	080066c9 	.word	0x080066c9
 8006660:	0800689f 	.word	0x0800689f
 8006664:	0800689f 	.word	0x0800689f
 8006668:	0800683f 	.word	0x0800683f
 800666c:	0800686b 	.word	0x0800686b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	7c12      	ldrb	r2, [r2, #16]
 800667c:	f107 0108 	add.w	r1, r7, #8
 8006680:	4610      	mov	r0, r2
 8006682:	4798      	blx	r3
 8006684:	60f8      	str	r0, [r7, #12]
      break;
 8006686:	e112      	b.n	80068ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	7c1b      	ldrb	r3, [r3, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10d      	bne.n	80066ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006698:	f107 0208 	add.w	r2, r7, #8
 800669c:	4610      	mov	r0, r2
 800669e:	4798      	blx	r3
 80066a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	2202      	movs	r2, #2
 80066a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80066aa:	e100      	b.n	80068ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	f107 0208 	add.w	r2, r7, #8
 80066b8:	4610      	mov	r0, r2
 80066ba:	4798      	blx	r3
 80066bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
 80066c2:	2202      	movs	r2, #2
 80066c4:	701a      	strb	r2, [r3, #0]
      break;
 80066c6:	e0f2      	b.n	80068ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	885b      	ldrh	r3, [r3, #2]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b05      	cmp	r3, #5
 80066d0:	f200 80ac 	bhi.w	800682c <USBD_GetDescriptor+0x204>
 80066d4:	a201      	add	r2, pc, #4	; (adr r2, 80066dc <USBD_GetDescriptor+0xb4>)
 80066d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066da:	bf00      	nop
 80066dc:	080066f5 	.word	0x080066f5
 80066e0:	08006729 	.word	0x08006729
 80066e4:	0800675d 	.word	0x0800675d
 80066e8:	08006791 	.word	0x08006791
 80066ec:	080067c5 	.word	0x080067c5
 80066f0:	080067f9 	.word	0x080067f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00b      	beq.n	8006718 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	7c12      	ldrb	r2, [r2, #16]
 800670c:	f107 0108 	add.w	r1, r7, #8
 8006710:	4610      	mov	r0, r2
 8006712:	4798      	blx	r3
 8006714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006716:	e091      	b.n	800683c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fa97 	bl	8006c4e <USBD_CtlError>
            err++;
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	3301      	adds	r3, #1
 8006724:	72fb      	strb	r3, [r7, #11]
          break;
 8006726:	e089      	b.n	800683c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00b      	beq.n	800674c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	7c12      	ldrb	r2, [r2, #16]
 8006740:	f107 0108 	add.w	r1, r7, #8
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
 8006748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800674a:	e077      	b.n	800683c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fa7d 	bl	8006c4e <USBD_CtlError>
            err++;
 8006754:	7afb      	ldrb	r3, [r7, #11]
 8006756:	3301      	adds	r3, #1
 8006758:	72fb      	strb	r3, [r7, #11]
          break;
 800675a:	e06f      	b.n	800683c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	7c12      	ldrb	r2, [r2, #16]
 8006774:	f107 0108 	add.w	r1, r7, #8
 8006778:	4610      	mov	r0, r2
 800677a:	4798      	blx	r3
 800677c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800677e:	e05d      	b.n	800683c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fa63 	bl	8006c4e <USBD_CtlError>
            err++;
 8006788:	7afb      	ldrb	r3, [r7, #11]
 800678a:	3301      	adds	r3, #1
 800678c:	72fb      	strb	r3, [r7, #11]
          break;
 800678e:	e055      	b.n	800683c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00b      	beq.n	80067b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	7c12      	ldrb	r2, [r2, #16]
 80067a8:	f107 0108 	add.w	r1, r7, #8
 80067ac:	4610      	mov	r0, r2
 80067ae:	4798      	blx	r3
 80067b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067b2:	e043      	b.n	800683c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa49 	bl	8006c4e <USBD_CtlError>
            err++;
 80067bc:	7afb      	ldrb	r3, [r7, #11]
 80067be:	3301      	adds	r3, #1
 80067c0:	72fb      	strb	r3, [r7, #11]
          break;
 80067c2:	e03b      	b.n	800683c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	7c12      	ldrb	r2, [r2, #16]
 80067dc:	f107 0108 	add.w	r1, r7, #8
 80067e0:	4610      	mov	r0, r2
 80067e2:	4798      	blx	r3
 80067e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067e6:	e029      	b.n	800683c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fa2f 	bl	8006c4e <USBD_CtlError>
            err++;
 80067f0:	7afb      	ldrb	r3, [r7, #11]
 80067f2:	3301      	adds	r3, #1
 80067f4:	72fb      	strb	r3, [r7, #11]
          break;
 80067f6:	e021      	b.n	800683c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	7c12      	ldrb	r2, [r2, #16]
 8006810:	f107 0108 	add.w	r1, r7, #8
 8006814:	4610      	mov	r0, r2
 8006816:	4798      	blx	r3
 8006818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800681a:	e00f      	b.n	800683c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa15 	bl	8006c4e <USBD_CtlError>
            err++;
 8006824:	7afb      	ldrb	r3, [r7, #11]
 8006826:	3301      	adds	r3, #1
 8006828:	72fb      	strb	r3, [r7, #11]
          break;
 800682a:	e007      	b.n	800683c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa0d 	bl	8006c4e <USBD_CtlError>
          err++;
 8006834:	7afb      	ldrb	r3, [r7, #11]
 8006836:	3301      	adds	r3, #1
 8006838:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800683a:	e038      	b.n	80068ae <USBD_GetDescriptor+0x286>
 800683c:	e037      	b.n	80068ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	7c1b      	ldrb	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684e:	f107 0208 	add.w	r2, r7, #8
 8006852:	4610      	mov	r0, r2
 8006854:	4798      	blx	r3
 8006856:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006858:	e029      	b.n	80068ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f9f6 	bl	8006c4e <USBD_CtlError>
        err++;
 8006862:	7afb      	ldrb	r3, [r7, #11]
 8006864:	3301      	adds	r3, #1
 8006866:	72fb      	strb	r3, [r7, #11]
      break;
 8006868:	e021      	b.n	80068ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	7c1b      	ldrb	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10d      	bne.n	800688e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	f107 0208 	add.w	r2, r7, #8
 800687e:	4610      	mov	r0, r2
 8006880:	4798      	blx	r3
 8006882:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3301      	adds	r3, #1
 8006888:	2207      	movs	r2, #7
 800688a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800688c:	e00f      	b.n	80068ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f9dc 	bl	8006c4e <USBD_CtlError>
        err++;
 8006896:	7afb      	ldrb	r3, [r7, #11]
 8006898:	3301      	adds	r3, #1
 800689a:	72fb      	strb	r3, [r7, #11]
      break;
 800689c:	e007      	b.n	80068ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f9d4 	bl	8006c4e <USBD_CtlError>
      err++;
 80068a6:	7afb      	ldrb	r3, [r7, #11]
 80068a8:	3301      	adds	r3, #1
 80068aa:	72fb      	strb	r3, [r7, #11]
      break;
 80068ac:	bf00      	nop
  }

  if (err != 0U)
 80068ae:	7afb      	ldrb	r3, [r7, #11]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d11c      	bne.n	80068ee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80068b4:	893b      	ldrh	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d011      	beq.n	80068de <USBD_GetDescriptor+0x2b6>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	88db      	ldrh	r3, [r3, #6]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00d      	beq.n	80068de <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	88da      	ldrh	r2, [r3, #6]
 80068c6:	893b      	ldrh	r3, [r7, #8]
 80068c8:	4293      	cmp	r3, r2
 80068ca:	bf28      	it	cs
 80068cc:	4613      	movcs	r3, r2
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80068d2:	893b      	ldrh	r3, [r7, #8]
 80068d4:	461a      	mov	r2, r3
 80068d6:	68f9      	ldr	r1, [r7, #12]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fa22 	bl	8006d22 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	88db      	ldrh	r3, [r3, #6]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d104      	bne.n	80068f0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fa79 	bl	8006dde <USBD_CtlSendStatus>
 80068ec:	e000      	b.n	80068f0 <USBD_GetDescriptor+0x2c8>
    return;
 80068ee:	bf00      	nop
    }
  }
}
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop

080068f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	889b      	ldrh	r3, [r3, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d130      	bne.n	800696c <USBD_SetAddress+0x74>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	88db      	ldrh	r3, [r3, #6]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d12c      	bne.n	800696c <USBD_SetAddress+0x74>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	885b      	ldrh	r3, [r3, #2]
 8006916:	2b7f      	cmp	r3, #127	; 0x7f
 8006918:	d828      	bhi.n	800696c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	885b      	ldrh	r3, [r3, #2]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006924:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692c:	2b03      	cmp	r3, #3
 800692e:	d104      	bne.n	800693a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f98b 	bl	8006c4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006938:	e01d      	b.n	8006976 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	7bfa      	ldrb	r2, [r7, #15]
 800693e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fede 	bl	8007708 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fa46 	bl	8006dde <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d004      	beq.n	8006962 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006960:	e009      	b.n	8006976 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696a:	e004      	b.n	8006976 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f96d 	bl	8006c4e <USBD_CtlError>
  }
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
	...

08006980 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	885b      	ldrh	r3, [r3, #2]
 800698e:	b2da      	uxtb	r2, r3
 8006990:	4b41      	ldr	r3, [pc, #260]	; (8006a98 <USBD_SetConfig+0x118>)
 8006992:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006994:	4b40      	ldr	r3, [pc, #256]	; (8006a98 <USBD_SetConfig+0x118>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d904      	bls.n	80069a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f955 	bl	8006c4e <USBD_CtlError>
 80069a4:	e075      	b.n	8006a92 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d002      	beq.n	80069b6 <USBD_SetConfig+0x36>
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d023      	beq.n	80069fc <USBD_SetConfig+0x7c>
 80069b4:	e062      	b.n	8006a7c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80069b6:	4b38      	ldr	r3, [pc, #224]	; (8006a98 <USBD_SetConfig+0x118>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d01a      	beq.n	80069f4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80069be:	4b36      	ldr	r3, [pc, #216]	; (8006a98 <USBD_SetConfig+0x118>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2203      	movs	r2, #3
 80069cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069d0:	4b31      	ldr	r3, [pc, #196]	; (8006a98 <USBD_SetConfig+0x118>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff f9e7 	bl	8005daa <USBD_SetClassConfig>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d104      	bne.n	80069ec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f932 	bl	8006c4e <USBD_CtlError>
            return;
 80069ea:	e052      	b.n	8006a92 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f9f6 	bl	8006dde <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80069f2:	e04e      	b.n	8006a92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f9f2 	bl	8006dde <USBD_CtlSendStatus>
        break;
 80069fa:	e04a      	b.n	8006a92 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80069fc:	4b26      	ldr	r3, [pc, #152]	; (8006a98 <USBD_SetConfig+0x118>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d112      	bne.n	8006a2a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006a0c:	4b22      	ldr	r3, [pc, #136]	; (8006a98 <USBD_SetConfig+0x118>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a16:	4b20      	ldr	r3, [pc, #128]	; (8006a98 <USBD_SetConfig+0x118>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff f9e3 	bl	8005de8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f9db 	bl	8006dde <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a28:	e033      	b.n	8006a92 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006a2a:	4b1b      	ldr	r3, [pc, #108]	; (8006a98 <USBD_SetConfig+0x118>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d01d      	beq.n	8006a74 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff f9d1 	bl	8005de8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a46:	4b14      	ldr	r3, [pc, #80]	; (8006a98 <USBD_SetConfig+0x118>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a50:	4b11      	ldr	r3, [pc, #68]	; (8006a98 <USBD_SetConfig+0x118>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff f9a7 	bl	8005daa <USBD_SetClassConfig>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d104      	bne.n	8006a6c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f8f2 	bl	8006c4e <USBD_CtlError>
            return;
 8006a6a:	e012      	b.n	8006a92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f9b6 	bl	8006dde <USBD_CtlSendStatus>
        break;
 8006a72:	e00e      	b.n	8006a92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f9b2 	bl	8006dde <USBD_CtlSendStatus>
        break;
 8006a7a:	e00a      	b.n	8006a92 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f8e5 	bl	8006c4e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006a84:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <USBD_SetConfig+0x118>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff f9ac 	bl	8005de8 <USBD_ClrClassConfig>
        break;
 8006a90:	bf00      	nop
    }
  }
}
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	200001a4 	.word	0x200001a4

08006a9c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	88db      	ldrh	r3, [r3, #6]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d004      	beq.n	8006ab8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f8cc 	bl	8006c4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ab6:	e022      	b.n	8006afe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	dc02      	bgt.n	8006ac8 <USBD_GetConfig+0x2c>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	dc03      	bgt.n	8006ace <USBD_GetConfig+0x32>
 8006ac6:	e015      	b.n	8006af4 <USBD_GetConfig+0x58>
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d00b      	beq.n	8006ae4 <USBD_GetConfig+0x48>
 8006acc:	e012      	b.n	8006af4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	2201      	movs	r2, #1
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f920 	bl	8006d22 <USBD_CtlSendData>
        break;
 8006ae2:	e00c      	b.n	8006afe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f918 	bl	8006d22 <USBD_CtlSendData>
        break;
 8006af2:	e004      	b.n	8006afe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f8a9 	bl	8006c4e <USBD_CtlError>
        break;
 8006afc:	bf00      	nop
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b16:	3b01      	subs	r3, #1
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d81e      	bhi.n	8006b5a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	88db      	ldrh	r3, [r3, #6]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d004      	beq.n	8006b2e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f891 	bl	8006c4e <USBD_CtlError>
        break;
 8006b2c:	e01a      	b.n	8006b64 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f043 0202 	orr.w	r2, r3, #2
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	330c      	adds	r3, #12
 8006b4e:	2202      	movs	r2, #2
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f8e5 	bl	8006d22 <USBD_CtlSendData>
      break;
 8006b58:	e004      	b.n	8006b64 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f876 	bl	8006c4e <USBD_CtlError>
      break;
 8006b62:	bf00      	nop
  }
}
 8006b64:	bf00      	nop
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	885b      	ldrh	r3, [r3, #2]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d106      	bne.n	8006b8c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f929 	bl	8006dde <USBD_CtlSendStatus>
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d80b      	bhi.n	8006bc2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	885b      	ldrh	r3, [r3, #2]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d10c      	bne.n	8006bcc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f90f 	bl	8006dde <USBD_CtlSendStatus>
      }
      break;
 8006bc0:	e004      	b.n	8006bcc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f842 	bl	8006c4e <USBD_CtlError>
      break;
 8006bca:	e000      	b.n	8006bce <USBD_ClrFeature+0x3a>
      break;
 8006bcc:	bf00      	nop
  }
}
 8006bce:	bf00      	nop
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781a      	ldrb	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	785a      	ldrb	r2, [r3, #1]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	3302      	adds	r3, #2
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	3303      	adds	r3, #3
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	4413      	add	r3, r2
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	3305      	adds	r3, #5
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	4413      	add	r3, r2
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	3306      	adds	r3, #6
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	3307      	adds	r3, #7
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	4413      	add	r3, r2
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	80da      	strh	r2, [r3, #6]

}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr

08006c4e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006c58:	2180      	movs	r1, #128	; 0x80
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fcea 	bl	8007634 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006c60:	2100      	movs	r1, #0
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fce6 	bl	8007634 <USBD_LL_StallEP>
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d032      	beq.n	8006cec <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 f834 	bl	8006cf4 <USBD_GetLen>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	3301      	adds	r3, #1
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	75fa      	strb	r2, [r7, #23]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	7812      	ldrb	r2, [r2, #0]
 8006caa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	75fa      	strb	r2, [r7, #23]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	2203      	movs	r2, #3
 8006cba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006cbc:	e012      	b.n	8006ce4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	60fa      	str	r2, [r7, #12]
 8006cc4:	7dfa      	ldrb	r2, [r7, #23]
 8006cc6:	1c51      	adds	r1, r2, #1
 8006cc8:	75f9      	strb	r1, [r7, #23]
 8006cca:	4611      	mov	r1, r2
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	440a      	add	r2, r1
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	75fa      	strb	r2, [r7, #23]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4413      	add	r3, r2
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e8      	bne.n	8006cbe <USBD_GetString+0x4e>
    }
  }
}
 8006cec:	bf00      	nop
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006d00:	e005      	b.n	8006d0e <USBD_GetLen+0x1a>
  {
    len++;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	3301      	adds	r3, #1
 8006d06:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f5      	bne.n	8006d02 <USBD_GetLen+0xe>
  }

  return len;
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr

08006d22 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d38:	88fa      	ldrh	r2, [r7, #6]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006d3e:	88fa      	ldrh	r2, [r7, #6]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d44:	88fb      	ldrh	r3, [r7, #6]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	2100      	movs	r1, #0
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fcfb 	bl	8007746 <USBD_LL_Transmit>

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	4613      	mov	r3, r2
 8006d66:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d68:	88fb      	ldrh	r3, [r7, #6]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 fce9 	bl	8007746 <USBD_LL_Transmit>

  return USBD_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2203      	movs	r2, #3
 8006d90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d94:	88fa      	ldrh	r2, [r7, #6]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006d9c:	88fa      	ldrh	r2, [r7, #6]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	2100      	movs	r1, #0
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 fcee 	bl	800778c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dc8:	88fb      	ldrh	r3, [r7, #6]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	2100      	movs	r1, #0
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fcdc 	bl	800778c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2204      	movs	r2, #4
 8006dea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dee:	2300      	movs	r3, #0
 8006df0:	2200      	movs	r2, #0
 8006df2:	2100      	movs	r1, #0
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fca6 	bl	8007746 <USBD_LL_Transmit>

  return USBD_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2205      	movs	r2, #5
 8006e10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e14:	2300      	movs	r3, #0
 8006e16:	2200      	movs	r2, #0
 8006e18:	2100      	movs	r1, #0
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fcb6 	bl	800778c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e30:	2200      	movs	r2, #0
 8006e32:	4912      	ldr	r1, [pc, #72]	; (8006e7c <MX_USB_DEVICE_Init+0x50>)
 8006e34:	4812      	ldr	r0, [pc, #72]	; (8006e80 <MX_USB_DEVICE_Init+0x54>)
 8006e36:	f7fe ff5e 	bl	8005cf6 <USBD_Init>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e40:	f7f9 fa7c 	bl	800033c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e44:	490f      	ldr	r1, [pc, #60]	; (8006e84 <MX_USB_DEVICE_Init+0x58>)
 8006e46:	480e      	ldr	r0, [pc, #56]	; (8006e80 <MX_USB_DEVICE_Init+0x54>)
 8006e48:	f7fe ff80 	bl	8005d4c <USBD_RegisterClass>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e52:	f7f9 fa73 	bl	800033c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e56:	490c      	ldr	r1, [pc, #48]	; (8006e88 <MX_USB_DEVICE_Init+0x5c>)
 8006e58:	4809      	ldr	r0, [pc, #36]	; (8006e80 <MX_USB_DEVICE_Init+0x54>)
 8006e5a:	f7fe feb1 	bl	8005bc0 <USBD_CDC_RegisterInterface>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e64:	f7f9 fa6a 	bl	800033c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e68:	4805      	ldr	r0, [pc, #20]	; (8006e80 <MX_USB_DEVICE_Init+0x54>)
 8006e6a:	f7fe ff88 	bl	8005d7e <USBD_Start>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e74:	f7f9 fa62 	bl	800033c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e78:	bf00      	nop
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	20000134 	.word	0x20000134
 8006e80:	200001a8 	.word	0x200001a8
 8006e84:	20000020 	.word	0x20000020
 8006e88:	20000124 	.word	0x20000124

08006e8c <cdcAvailable>:
uint8_t  rx_buf[RX_LEN];  //

//링버퍼 구현
//수신 버퍼에 얼만큼의 데이터가 있는지 확인
uint32_t cdcAvailable(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % RX_LEN; // overflow 처리
 8006e92:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <cdcAvailable+0x24>)
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <cdcAvailable+0x28>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea0:	607b      	str	r3, [r7, #4]

  return ret;
 8006ea2:	687b      	ldr	r3, [r7, #4]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	2000046c 	.word	0x2000046c
 8006eb4:	20000470 	.word	0x20000470

08006eb8 <cdcRead>:


uint8_t cdcRead(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8006ebe:	4b0c      	ldr	r3, [pc, #48]	; (8006ef0 <cdcRead+0x38>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a0c      	ldr	r2, [pc, #48]	; (8006ef4 <cdcRead+0x3c>)
 8006ec4:	5cd3      	ldrb	r3, [r2, r3]
 8006ec6:	71fb      	strb	r3, [r7, #7]

  //하나씩 증가
  if(rx_out != rx_in)
 8006ec8:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <cdcRead+0x38>)
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <cdcRead+0x40>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d006      	beq.n	8006ee2 <cdcRead+0x2a>
  {
    rx_out = (rx_out + 1) % RX_LEN;
 8006ed4:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <cdcRead+0x38>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ede:	4a04      	ldr	r2, [pc, #16]	; (8006ef0 <cdcRead+0x38>)
 8006ee0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20000470 	.word	0x20000470
 8006ef4:	20000474 	.word	0x20000474
 8006ef8:	2000046c 	.word	0x2000046c

08006efc <cdcDataIn>:


void cdcDataIn(uint8_t rx_data)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 8006f06:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <cdcDataIn+0x3c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	490c      	ldr	r1, [pc, #48]	; (8006f3c <cdcDataIn+0x40>)
 8006f0c:	79fa      	ldrb	r2, [r7, #7]
 8006f0e:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % RX_LEN;
 8006f10:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <cdcDataIn+0x3c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3301      	adds	r3, #1
 8006f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1a:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 8006f1c:	4b08      	ldr	r3, [pc, #32]	; (8006f40 <cdcDataIn+0x44>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d002      	beq.n	8006f2c <cdcDataIn+0x30>
  {
    rx_in = next_rx_in;
 8006f26:	4a04      	ldr	r2, [pc, #16]	; (8006f38 <cdcDataIn+0x3c>)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6013      	str	r3, [r2, #0]
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bc80      	pop	{r7}
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	2000046c 	.word	0x2000046c
 8006f3c:	20000474 	.word	0x20000474
 8006f40:	20000470 	.word	0x20000470

08006f44 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 8006f4e:	f7f9 f994 	bl	800027a <millis>
 8006f52:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f8ba 	bl	80070d4 <CDC_Transmit_FS>
 8006f60:	4603      	mov	r3, r0
 8006f62:	72fb      	strb	r3, [r7, #11]
    if(ret == USBD_OK)
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <cdcWrite+0x2a>
    {
      return length;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	e00e      	b.n	8006f8c <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 8006f6e:	7afb      	ldrb	r3, [r7, #11]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d101      	bne.n	8006f78 <cdcWrite+0x34>
    {
      return 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	e009      	b.n	8006f8c <cdcWrite+0x48>
    }

    // retry후 100ms해보고 안되면 탈출
    if(millis() - pre_time >= 100)
 8006f78:	f7f9 f97f 	bl	800027a <millis>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b63      	cmp	r3, #99	; 0x63
 8006f84:	d800      	bhi.n	8006f88 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 8006f86:	e7e5      	b.n	8006f54 <cdcWrite+0x10>
    {
      break;
 8006f88:	bf00      	nop
    }
  }

  return 0;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4905      	ldr	r1, [pc, #20]	; (8006fb0 <CDC_Init_FS+0x1c>)
 8006f9c:	4805      	ldr	r0, [pc, #20]	; (8006fb4 <CDC_Init_FS+0x20>)
 8006f9e:	f7fe fe25 	bl	8005bec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006fa2:	4905      	ldr	r1, [pc, #20]	; (8006fb8 <CDC_Init_FS+0x24>)
 8006fa4:	4803      	ldr	r0, [pc, #12]	; (8006fb4 <CDC_Init_FS+0x20>)
 8006fa6:	f7fe fe3a 	bl	8005c1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006faa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20000874 	.word	0x20000874
 8006fb4:	200001a8 	.word	0x200001a8
 8006fb8:	20000674 	.word	0x20000674

08006fbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006fc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr
	...

08006fcc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	6039      	str	r1, [r7, #0]
 8006fd6:	71fb      	strb	r3, [r7, #7]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	2b23      	cmp	r3, #35	; 0x23
 8006fe0:	d84a      	bhi.n	8007078 <CDC_Control_FS+0xac>
 8006fe2:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <CDC_Control_FS+0x1c>)
 8006fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe8:	08007079 	.word	0x08007079
 8006fec:	08007079 	.word	0x08007079
 8006ff0:	08007079 	.word	0x08007079
 8006ff4:	08007079 	.word	0x08007079
 8006ff8:	08007079 	.word	0x08007079
 8006ffc:	08007079 	.word	0x08007079
 8007000:	08007079 	.word	0x08007079
 8007004:	08007079 	.word	0x08007079
 8007008:	08007079 	.word	0x08007079
 800700c:	08007079 	.word	0x08007079
 8007010:	08007079 	.word	0x08007079
 8007014:	08007079 	.word	0x08007079
 8007018:	08007079 	.word	0x08007079
 800701c:	08007079 	.word	0x08007079
 8007020:	08007079 	.word	0x08007079
 8007024:	08007079 	.word	0x08007079
 8007028:	08007079 	.word	0x08007079
 800702c:	08007079 	.word	0x08007079
 8007030:	08007079 	.word	0x08007079
 8007034:	08007079 	.word	0x08007079
 8007038:	08007079 	.word	0x08007079
 800703c:	08007079 	.word	0x08007079
 8007040:	08007079 	.word	0x08007079
 8007044:	08007079 	.word	0x08007079
 8007048:	08007079 	.word	0x08007079
 800704c:	08007079 	.word	0x08007079
 8007050:	08007079 	.word	0x08007079
 8007054:	08007079 	.word	0x08007079
 8007058:	08007079 	.word	0x08007079
 800705c:	08007079 	.word	0x08007079
 8007060:	08007079 	.word	0x08007079
 8007064:	08007079 	.word	0x08007079
 8007068:	08007079 	.word	0x08007079
 800706c:	08007079 	.word	0x08007079
 8007070:	08007079 	.word	0x08007079
 8007074:	08007079 	.word	0x08007079
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007078:	bf00      	nop
  }

  return (USBD_OK);
 800707a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	bc80      	pop	{r7}
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop

08007088 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	480e      	ldr	r0, [pc, #56]	; (80070d0 <CDC_Receive_FS+0x48>)
 8007096:	f7fe fdc2 	bl	8005c1e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800709a:	480d      	ldr	r0, [pc, #52]	; (80070d0 <CDC_Receive_FS+0x48>)
 800709c:	f7fe fe01 	bl	8005ca2 <USBD_CDC_ReceivePacket>

  //버퍼에 저장
  for(int i=0; i<*Len; i++)
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	e009      	b.n	80070ba <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	4413      	add	r3, r2
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff ff24 	bl	8006efc <cdcDataIn>
  for(int i=0; i<*Len; i++)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3301      	adds	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d8f0      	bhi.n	80070a6 <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 80070c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	200001a8 	.word	0x200001a8

080070d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80070e4:	4b0d      	ldr	r3, [pc, #52]	; (800711c <CDC_Transmit_FS+0x48>)
 80070e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e00b      	b.n	8007112 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80070fa:	887b      	ldrh	r3, [r7, #2]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	4806      	ldr	r0, [pc, #24]	; (800711c <CDC_Transmit_FS+0x48>)
 8007102:	f7fe fd73 	bl	8005bec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007106:	4805      	ldr	r0, [pc, #20]	; (800711c <CDC_Transmit_FS+0x48>)
 8007108:	f7fe fd9c 	bl	8005c44 <USBD_CDC_TransmitPacket>
 800710c:	4603      	mov	r3, r0
 800710e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007110:	7bfb      	ldrb	r3, [r7, #15]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	200001a8 	.word	0x200001a8

08007120 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	6039      	str	r1, [r7, #0]
 800712a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2212      	movs	r2, #18
 8007130:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007132:	4b03      	ldr	r3, [pc, #12]	; (8007140 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	bc80      	pop	{r7}
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20000150 	.word	0x20000150

08007144 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	6039      	str	r1, [r7, #0]
 800714e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2204      	movs	r2, #4
 8007154:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007156:	4b03      	ldr	r3, [pc, #12]	; (8007164 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	bc80      	pop	{r7}
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000164 	.word	0x20000164

08007168 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	6039      	str	r1, [r7, #0]
 8007172:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	4907      	ldr	r1, [pc, #28]	; (800719c <USBD_FS_ProductStrDescriptor+0x34>)
 800717e:	4808      	ldr	r0, [pc, #32]	; (80071a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007180:	f7ff fd76 	bl	8006c70 <USBD_GetString>
 8007184:	e004      	b.n	8007190 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	4904      	ldr	r1, [pc, #16]	; (800719c <USBD_FS_ProductStrDescriptor+0x34>)
 800718a:	4805      	ldr	r0, [pc, #20]	; (80071a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800718c:	f7ff fd70 	bl	8006c70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007190:	4b02      	ldr	r3, [pc, #8]	; (800719c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000a74 	.word	0x20000a74
 80071a0:	08007928 	.word	0x08007928

080071a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	6039      	str	r1, [r7, #0]
 80071ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	4904      	ldr	r1, [pc, #16]	; (80071c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071b4:	4804      	ldr	r0, [pc, #16]	; (80071c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071b6:	f7ff fd5b 	bl	8006c70 <USBD_GetString>
  return USBD_StrDesc;
 80071ba:	4b02      	ldr	r3, [pc, #8]	; (80071c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20000a74 	.word	0x20000a74
 80071c8:	08007940 	.word	0x08007940

080071cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	221a      	movs	r2, #26
 80071dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80071de:	f000 f843 	bl	8007268 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80071e2:	4b02      	ldr	r3, [pc, #8]	; (80071ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20000168 	.word	0x20000168

080071f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	6039      	str	r1, [r7, #0]
 80071fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d105      	bne.n	800720e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	4907      	ldr	r1, [pc, #28]	; (8007224 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007206:	4808      	ldr	r0, [pc, #32]	; (8007228 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007208:	f7ff fd32 	bl	8006c70 <USBD_GetString>
 800720c:	e004      	b.n	8007218 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	4904      	ldr	r1, [pc, #16]	; (8007224 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007212:	4805      	ldr	r0, [pc, #20]	; (8007228 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007214:	f7ff fd2c 	bl	8006c70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007218:	4b02      	ldr	r3, [pc, #8]	; (8007224 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20000a74 	.word	0x20000a74
 8007228:	08007954 	.word	0x08007954

0800722c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	4603      	mov	r3, r0
 8007234:	6039      	str	r1, [r7, #0]
 8007236:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d105      	bne.n	800724a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4907      	ldr	r1, [pc, #28]	; (8007260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007242:	4808      	ldr	r0, [pc, #32]	; (8007264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007244:	f7ff fd14 	bl	8006c70 <USBD_GetString>
 8007248:	e004      	b.n	8007254 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	4904      	ldr	r1, [pc, #16]	; (8007260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800724e:	4805      	ldr	r0, [pc, #20]	; (8007264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007250:	f7ff fd0e 	bl	8006c70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007254:	4b02      	ldr	r3, [pc, #8]	; (8007260 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000a74 	.word	0x20000a74
 8007264:	08007960 	.word	0x08007960

08007268 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800726e:	4b0f      	ldr	r3, [pc, #60]	; (80072ac <Get_SerialNum+0x44>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007274:	4b0e      	ldr	r3, [pc, #56]	; (80072b0 <Get_SerialNum+0x48>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800727a:	4b0e      	ldr	r3, [pc, #56]	; (80072b4 <Get_SerialNum+0x4c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4413      	add	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d009      	beq.n	80072a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800728e:	2208      	movs	r2, #8
 8007290:	4909      	ldr	r1, [pc, #36]	; (80072b8 <Get_SerialNum+0x50>)
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 f814 	bl	80072c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007298:	2204      	movs	r2, #4
 800729a:	4908      	ldr	r1, [pc, #32]	; (80072bc <Get_SerialNum+0x54>)
 800729c:	68b8      	ldr	r0, [r7, #8]
 800729e:	f000 f80f 	bl	80072c0 <IntToUnicode>
  }
}
 80072a2:	bf00      	nop
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	1ffff7e8 	.word	0x1ffff7e8
 80072b0:	1ffff7ec 	.word	0x1ffff7ec
 80072b4:	1ffff7f0 	.word	0x1ffff7f0
 80072b8:	2000016a 	.word	0x2000016a
 80072bc:	2000017a 	.word	0x2000017a

080072c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	4613      	mov	r3, r2
 80072cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80072d2:	2300      	movs	r3, #0
 80072d4:	75fb      	strb	r3, [r7, #23]
 80072d6:	e027      	b.n	8007328 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	0f1b      	lsrs	r3, r3, #28
 80072dc:	2b09      	cmp	r3, #9
 80072de:	d80b      	bhi.n	80072f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	0f1b      	lsrs	r3, r3, #28
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	4619      	mov	r1, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	440b      	add	r3, r1
 80072f0:	3230      	adds	r2, #48	; 0x30
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	e00a      	b.n	800730e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	0f1b      	lsrs	r3, r3, #28
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	4619      	mov	r1, r3
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	440b      	add	r3, r1
 8007308:	3237      	adds	r2, #55	; 0x37
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	3301      	adds	r3, #1
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	4413      	add	r3, r2
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	3301      	adds	r3, #1
 8007326:	75fb      	strb	r3, [r7, #23]
 8007328:	7dfa      	ldrb	r2, [r7, #23]
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	429a      	cmp	r2, r3
 800732e:	d3d3      	bcc.n	80072d8 <IntToUnicode+0x18>
  }
}
 8007330:	bf00      	nop
 8007332:	bf00      	nop
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr

0800733c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a0d      	ldr	r2, [pc, #52]	; (8007380 <HAL_PCD_MspInit+0x44>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d113      	bne.n	8007376 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800734e:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <HAL_PCD_MspInit+0x48>)
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	4a0c      	ldr	r2, [pc, #48]	; (8007384 <HAL_PCD_MspInit+0x48>)
 8007354:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007358:	61d3      	str	r3, [r2, #28]
 800735a:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <HAL_PCD_MspInit+0x48>)
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007366:	2200      	movs	r2, #0
 8007368:	2100      	movs	r1, #0
 800736a:	2014      	movs	r0, #20
 800736c:	f7f9 fa63 	bl	8000836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007370:	2014      	movs	r0, #20
 8007372:	f7f9 fa7c 	bl	800086e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007376:	bf00      	nop
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	40005c00 	.word	0x40005c00
 8007384:	40021000 	.word	0x40021000

08007388 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f7fe fd35 	bl	8005e0e <USBD_LL_SetupStage>
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80073be:	78fa      	ldrb	r2, [r7, #3]
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	4613      	mov	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	440b      	add	r3, r1
 80073cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	78fb      	ldrb	r3, [r7, #3]
 80073d4:	4619      	mov	r1, r3
 80073d6:	f7fe fd67 	bl	8005ea8 <USBD_LL_DataOutStage>
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80073f4:	78fa      	ldrb	r2, [r7, #3]
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	440b      	add	r3, r1
 8007402:	333c      	adds	r3, #60	; 0x3c
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	78fb      	ldrb	r3, [r7, #3]
 8007408:	4619      	mov	r1, r3
 800740a:	f7fe fdbe 	bl	8005f8a <USBD_LL_DataInStage>
}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007424:	4618      	mov	r0, r3
 8007426:	f7fe fece 	bl	80061c6 <USBD_LL_SOF>
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800743a:	2301      	movs	r3, #1
 800743c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2b02      	cmp	r3, #2
 8007444:	d001      	beq.n	800744a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007446:	f7f8 ff79 	bl	800033c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007450:	7bfa      	ldrb	r2, [r7, #15]
 8007452:	4611      	mov	r1, r2
 8007454:	4618      	mov	r0, r3
 8007456:	f7fe fe7e 	bl	8006156 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe fe37 	bl	80060d4 <USBD_LL_Reset>
}
 8007466:	bf00      	nop
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fe78 	bl	8006174 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d005      	beq.n	8007498 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800748c:	4b04      	ldr	r3, [pc, #16]	; (80074a0 <HAL_PCD_SuspendCallback+0x30>)
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	4a03      	ldr	r2, [pc, #12]	; (80074a0 <HAL_PCD_SuspendCallback+0x30>)
 8007492:	f043 0306 	orr.w	r3, r3, #6
 8007496:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	e000ed00 	.word	0xe000ed00

080074a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fe72 	bl	800619c <USBD_LL_Resume>
}
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80074c8:	4a28      	ldr	r2, [pc, #160]	; (800756c <USBD_LL_Init+0xac>)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a26      	ldr	r2, [pc, #152]	; (800756c <USBD_LL_Init+0xac>)
 80074d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80074d8:	4b24      	ldr	r3, [pc, #144]	; (800756c <USBD_LL_Init+0xac>)
 80074da:	4a25      	ldr	r2, [pc, #148]	; (8007570 <USBD_LL_Init+0xb0>)
 80074dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80074de:	4b23      	ldr	r3, [pc, #140]	; (800756c <USBD_LL_Init+0xac>)
 80074e0:	2208      	movs	r2, #8
 80074e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80074e4:	4b21      	ldr	r3, [pc, #132]	; (800756c <USBD_LL_Init+0xac>)
 80074e6:	2202      	movs	r2, #2
 80074e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80074ea:	4b20      	ldr	r3, [pc, #128]	; (800756c <USBD_LL_Init+0xac>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80074f0:	4b1e      	ldr	r3, [pc, #120]	; (800756c <USBD_LL_Init+0xac>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80074f6:	4b1d      	ldr	r3, [pc, #116]	; (800756c <USBD_LL_Init+0xac>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80074fc:	481b      	ldr	r0, [pc, #108]	; (800756c <USBD_LL_Init+0xac>)
 80074fe:	f7f9 fb86 	bl	8000c0e <HAL_PCD_Init>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007508:	f7f8 ff18 	bl	800033c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007512:	2318      	movs	r3, #24
 8007514:	2200      	movs	r2, #0
 8007516:	2100      	movs	r1, #0
 8007518:	f7fb f8a5 	bl	8002666 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007522:	2358      	movs	r3, #88	; 0x58
 8007524:	2200      	movs	r2, #0
 8007526:	2180      	movs	r1, #128	; 0x80
 8007528:	f7fb f89d 	bl	8002666 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007532:	23c0      	movs	r3, #192	; 0xc0
 8007534:	2200      	movs	r2, #0
 8007536:	2181      	movs	r1, #129	; 0x81
 8007538:	f7fb f895 	bl	8002666 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007542:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007546:	2200      	movs	r2, #0
 8007548:	2101      	movs	r1, #1
 800754a:	f7fb f88c 	bl	8002666 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007558:	2200      	movs	r2, #0
 800755a:	2182      	movs	r1, #130	; 0x82
 800755c:	f7fb f883 	bl	8002666 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000c74 	.word	0x20000c74
 8007570:	40005c00 	.word	0x40005c00

08007574 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800758a:	4618      	mov	r0, r3
 800758c:	f7f9 fc3e 	bl	8000e0c <HAL_PCD_Start>
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 f94e 	bl	8007838 <USBD_Get_USB_Status>
 800759c:	4603      	mov	r3, r0
 800759e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	4608      	mov	r0, r1
 80075b4:	4611      	mov	r1, r2
 80075b6:	461a      	mov	r2, r3
 80075b8:	4603      	mov	r3, r0
 80075ba:	70fb      	strb	r3, [r7, #3]
 80075bc:	460b      	mov	r3, r1
 80075be:	70bb      	strb	r3, [r7, #2]
 80075c0:	4613      	mov	r3, r2
 80075c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075d2:	78bb      	ldrb	r3, [r7, #2]
 80075d4:	883a      	ldrh	r2, [r7, #0]
 80075d6:	78f9      	ldrb	r1, [r7, #3]
 80075d8:	f7f9 fd93 	bl	8001102 <HAL_PCD_EP_Open>
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 f928 	bl	8007838 <USBD_Get_USB_Status>
 80075e8:	4603      	mov	r3, r0
 80075ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	460b      	mov	r3, r1
 8007600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007610:	78fa      	ldrb	r2, [r7, #3]
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f7f9 fdd1 	bl	80011bc <HAL_PCD_EP_Close>
 800761a:	4603      	mov	r3, r0
 800761c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f909 	bl	8007838 <USBD_Get_USB_Status>
 8007626:	4603      	mov	r3, r0
 8007628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800762a:	7bbb      	ldrb	r3, [r7, #14]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800764e:	78fa      	ldrb	r2, [r7, #3]
 8007650:	4611      	mov	r1, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f7f9 fe79 	bl	800134a <HAL_PCD_EP_SetStall>
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	4618      	mov	r0, r3
 8007660:	f000 f8ea 	bl	8007838 <USBD_Get_USB_Status>
 8007664:	4603      	mov	r3, r0
 8007666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007668:	7bbb      	ldrb	r3, [r7, #14]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800768c:	78fa      	ldrb	r2, [r7, #3]
 800768e:	4611      	mov	r1, r2
 8007690:	4618      	mov	r0, r3
 8007692:	f7f9 feba 	bl	800140a <HAL_PCD_EP_ClrStall>
 8007696:	4603      	mov	r3, r0
 8007698:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	4618      	mov	r0, r3
 800769e:	f000 f8cb 	bl	8007838 <USBD_Get_USB_Status>
 80076a2:	4603      	mov	r3, r0
 80076a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80076c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	da0c      	bge.n	80076e6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d2:	68f9      	ldr	r1, [r7, #12]
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	440b      	add	r3, r1
 80076e0:	3302      	adds	r3, #2
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	e00b      	b.n	80076fe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ec:	68f9      	ldr	r1, [r7, #12]
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	440b      	add	r3, r1
 80076f8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80076fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	bc80      	pop	{r7}
 8007706:	4770      	bx	lr

08007708 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007722:	78fa      	ldrb	r2, [r7, #3]
 8007724:	4611      	mov	r1, r2
 8007726:	4618      	mov	r0, r3
 8007728:	f7f9 fcc6 	bl	80010b8 <HAL_PCD_SetAddress>
 800772c:	4603      	mov	r3, r0
 800772e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	4618      	mov	r0, r3
 8007734:	f000 f880 	bl	8007838 <USBD_Get_USB_Status>
 8007738:	4603      	mov	r3, r0
 800773a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800773c:	7bbb      	ldrb	r3, [r7, #14]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b086      	sub	sp, #24
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	461a      	mov	r2, r3
 8007752:	460b      	mov	r3, r1
 8007754:	72fb      	strb	r3, [r7, #11]
 8007756:	4613      	mov	r3, r2
 8007758:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007768:	893b      	ldrh	r3, [r7, #8]
 800776a:	7af9      	ldrb	r1, [r7, #11]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	f7f9 fdb5 	bl	80012dc <HAL_PCD_EP_Transmit>
 8007772:	4603      	mov	r3, r0
 8007774:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	4618      	mov	r0, r3
 800777a:	f000 f85d 	bl	8007838 <USBD_Get_USB_Status>
 800777e:	4603      	mov	r3, r0
 8007780:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007782:	7dbb      	ldrb	r3, [r7, #22]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	607a      	str	r2, [r7, #4]
 8007796:	461a      	mov	r2, r3
 8007798:	460b      	mov	r3, r1
 800779a:	72fb      	strb	r3, [r7, #11]
 800779c:	4613      	mov	r3, r2
 800779e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80077ae:	893b      	ldrh	r3, [r7, #8]
 80077b0:	7af9      	ldrb	r1, [r7, #11]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	f7f9 fd4a 	bl	800124c <HAL_PCD_EP_Receive>
 80077b8:	4603      	mov	r3, r0
 80077ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 f83a 	bl	8007838 <USBD_Get_USB_Status>
 80077c4:	4603      	mov	r3, r0
 80077c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	460b      	mov	r3, r1
 80077dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077e4:	78fa      	ldrb	r2, [r7, #3]
 80077e6:	4611      	mov	r1, r2
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7f9 fd60 	bl	80012ae <HAL_PCD_EP_GetRxCount>
 80077ee:	4603      	mov	r3, r0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007800:	4b02      	ldr	r3, [pc, #8]	; (800780c <USBD_static_malloc+0x14>)
}
 8007802:	4618      	mov	r0, r3
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	bc80      	pop	{r7}
 800780a:	4770      	bx	lr
 800780c:	20000f64 	.word	0x20000f64

08007810 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]

}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr

08007822 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	460b      	mov	r3, r1
 800782c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	bc80      	pop	{r7}
 8007836:	4770      	bx	lr

08007838 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	2b03      	cmp	r3, #3
 800784a:	d817      	bhi.n	800787c <USBD_Get_USB_Status+0x44>
 800784c:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <USBD_Get_USB_Status+0x1c>)
 800784e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007852:	bf00      	nop
 8007854:	08007865 	.word	0x08007865
 8007858:	0800786b 	.word	0x0800786b
 800785c:	08007871 	.word	0x08007871
 8007860:	08007877 	.word	0x08007877
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	73fb      	strb	r3, [r7, #15]
    break;
 8007868:	e00b      	b.n	8007882 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800786a:	2302      	movs	r3, #2
 800786c:	73fb      	strb	r3, [r7, #15]
    break;
 800786e:	e008      	b.n	8007882 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007870:	2301      	movs	r3, #1
 8007872:	73fb      	strb	r3, [r7, #15]
    break;
 8007874:	e005      	b.n	8007882 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007876:	2302      	movs	r3, #2
 8007878:	73fb      	strb	r3, [r7, #15]
    break;
 800787a:	e002      	b.n	8007882 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800787c:	2302      	movs	r3, #2
 800787e:	73fb      	strb	r3, [r7, #15]
    break;
 8007880:	bf00      	nop
  }
  return usb_status;
 8007882:	7bfb      	ldrb	r3, [r7, #15]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop

08007890 <main>:


#include "main.h"

int main(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  hwInit();
 8007894:	f7f8 fe6a 	bl	800056c <hwInit>
  apInit();
 8007898:	f7f8 fc58 	bl	800014c <apInit>

  apMain();
 800789c:	f7f8 fc5c 	bl	8000158 <apMain>

  return 0;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <__libc_init_array>:
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	2600      	movs	r6, #0
 80078ac:	4d0c      	ldr	r5, [pc, #48]	; (80078e0 <__libc_init_array+0x38>)
 80078ae:	4c0d      	ldr	r4, [pc, #52]	; (80078e4 <__libc_init_array+0x3c>)
 80078b0:	1b64      	subs	r4, r4, r5
 80078b2:	10a4      	asrs	r4, r4, #2
 80078b4:	42a6      	cmp	r6, r4
 80078b6:	d109      	bne.n	80078cc <__libc_init_array+0x24>
 80078b8:	f000 f822 	bl	8007900 <_init>
 80078bc:	2600      	movs	r6, #0
 80078be:	4d0a      	ldr	r5, [pc, #40]	; (80078e8 <__libc_init_array+0x40>)
 80078c0:	4c0a      	ldr	r4, [pc, #40]	; (80078ec <__libc_init_array+0x44>)
 80078c2:	1b64      	subs	r4, r4, r5
 80078c4:	10a4      	asrs	r4, r4, #2
 80078c6:	42a6      	cmp	r6, r4
 80078c8:	d105      	bne.n	80078d6 <__libc_init_array+0x2e>
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80078d0:	4798      	blx	r3
 80078d2:	3601      	adds	r6, #1
 80078d4:	e7ee      	b.n	80078b4 <__libc_init_array+0xc>
 80078d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078da:	4798      	blx	r3
 80078dc:	3601      	adds	r6, #1
 80078de:	e7f2      	b.n	80078c6 <__libc_init_array+0x1e>
 80078e0:	08007994 	.word	0x08007994
 80078e4:	08007994 	.word	0x08007994
 80078e8:	08007994 	.word	0x08007994
 80078ec:	08007998 	.word	0x08007998

080078f0 <memset>:
 80078f0:	4603      	mov	r3, r0
 80078f2:	4402      	add	r2, r0
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d100      	bne.n	80078fa <memset+0xa>
 80078f8:	4770      	bx	lr
 80078fa:	f803 1b01 	strb.w	r1, [r3], #1
 80078fe:	e7f9      	b.n	80078f4 <memset+0x4>

08007900 <_init>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	bf00      	nop
 8007904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007906:	bc08      	pop	{r3}
 8007908:	469e      	mov	lr, r3
 800790a:	4770      	bx	lr

0800790c <_fini>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	bf00      	nop
 8007910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007912:	bc08      	pop	{r3}
 8007914:	469e      	mov	lr, r3
 8007916:	4770      	bx	lr
